
Alfa_12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002cc  00800100  00001282  00001316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008003cc  008003cc  000015e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003530  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e4c  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016a7  00000000  00000000  00005ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  0000724c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007bc  00000000  00000000  00007644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a59  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00009859  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5d c0       	rjmp	.+186    	; 0xbc <__ctors_end>
       2:	00 00       	nop
       4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	09 c7       	rjmp	.+3602   	; 0xe34 <__vector_8>
      22:	00 00       	nop
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	81 06       	cpc	r8, r17
      8e:	a1 06       	cpc	r10, r17
      90:	89 06       	cpc	r8, r25
      92:	bd 06       	cpc	r11, r29
      94:	e7 06       	cpc	r14, r23
      96:	c2 06       	cpc	r12, r18
      98:	c9 06       	cpc	r12, r25
      9a:	e7 06       	cpc	r14, r23
      9c:	d1 06       	cpc	r13, r17
      9e:	93 06       	cpc	r9, r19
      a0:	d8 06       	cpc	r13, r24
      a2:	e0 06       	cpc	r14, r16
      a4:	65 07       	cpc	r22, r21
      a6:	69 07       	cpc	r22, r25
      a8:	6d 07       	cpc	r22, r29
      aa:	71 07       	cpc	r23, r17
      ac:	82 07       	cpc	r24, r18
      ae:	75 07       	cpc	r23, r21
      b0:	82 07       	cpc	r24, r18
      b2:	82 07       	cpc	r24, r18
      b4:	7b 07       	cpc	r23, r27
      b6:	82 07       	cpc	r24, r18
      b8:	82 07       	cpc	r24, r18
      ba:	7f 07       	cpc	r23, r31

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d0 e1       	ldi	r29, 0x10	; 16
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	13 e0       	ldi	r17, 0x03	; 3
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e2 e8       	ldi	r30, 0x82	; 130
      d0:	f2 e1       	ldi	r31, 0x12	; 18
      d2:	00 e0       	ldi	r16, 0x00	; 0
      d4:	0b bf       	out	0x3b, r16	; 59
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x14>
      d8:	07 90       	elpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	ac 3c       	cpi	r26, 0xCC	; 204
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x10>

000000e2 <__do_clear_bss>:
      e2:	23 e0       	ldi	r18, 0x03	; 3
      e4:	ac ec       	ldi	r26, 0xCC	; 204
      e6:	b3 e0       	ldi	r27, 0x03	; 3
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a9 3d       	cpi	r26, 0xD9	; 217
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	d2 d5       	rcall	.+2980   	; 0xc98 <main>
      f4:	0c 94 3f 09 	jmp	0x127e	; 0x127e <_exit>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <Start_Init>:
	if(current_main_ch < 6)
		PORTC &= ~(1 << current_main_ch);
	else
		PORTE &= ~(1 << (current_main_ch - 6));
	_delay_ms(1000);								// выдерживаем пауза 1с
}
      fa:	f8 94       	cli
      fc:	61 d5       	rcall	.+2754   	; 0xbc0 <LCDSetup2>
      fe:	e4 e6       	ldi	r30, 0x64	; 100
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	80 61       	ori	r24, 0x10	; 16
     106:	80 83       	st	Z, r24
     108:	82 b1       	in	r24, 0x02	; 2
     10a:	8f 77       	andi	r24, 0x7F	; 127
     10c:	82 b9       	out	0x02, r24	; 2
     10e:	83 b1       	in	r24, 0x03	; 3
     110:	80 68       	ori	r24, 0x80	; 128
     112:	83 b9       	out	0x03, r24	; 3
     114:	8a b7       	in	r24, 0x3a	; 58
     116:	80 68       	ori	r24, 0x80	; 128
     118:	8a bf       	out	0x3a, r24	; 58
     11a:	89 b7       	in	r24, 0x39	; 57
     11c:	80 68       	ori	r24, 0x80	; 128
     11e:	89 bf       	out	0x39, r24	; 57
     120:	1f bc       	out	0x2f, r1	; 47
     122:	8e b5       	in	r24, 0x2e	; 46
     124:	85 60       	ori	r24, 0x05	; 5
     126:	8e bd       	out	0x2e, r24	; 46
     128:	8e b5       	in	r24, 0x2e	; 46
     12a:	8d 7f       	andi	r24, 0xFD	; 253
     12c:	8e bd       	out	0x2e, r24	; 46
     12e:	8a b3       	in	r24, 0x1a	; 26
     130:	8f 63       	ori	r24, 0x3F	; 63
     132:	8a bb       	out	0x1a, r24	; 26
     134:	8b b3       	in	r24, 0x1b	; 27
     136:	80 7c       	andi	r24, 0xC0	; 192
     138:	8b bb       	out	0x1b, r24	; 27
     13a:	87 b3       	in	r24, 0x17	; 23
     13c:	8f 63       	ori	r24, 0x3F	; 63
     13e:	87 bb       	out	0x17, r24	; 23
     140:	88 b3       	in	r24, 0x18	; 24
     142:	80 7c       	andi	r24, 0xC0	; 192
     144:	88 bb       	out	0x18, r24	; 24
     146:	e1 e6       	ldi	r30, 0x61	; 97
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 63       	ori	r24, 0x3F	; 63
     14e:	80 83       	st	Z, r24
     150:	e2 e6       	ldi	r30, 0x62	; 98
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 7c       	andi	r24, 0xC0	; 192
     158:	80 83       	st	Z, r24
     15a:	81 b3       	in	r24, 0x11	; 17
     15c:	8f 63       	ori	r24, 0x3F	; 63
     15e:	81 bb       	out	0x11, r24	; 17
     160:	82 b3       	in	r24, 0x12	; 18
     162:	80 7c       	andi	r24, 0xC0	; 192
     164:	82 bb       	out	0x12, r24	; 18
     166:	84 b3       	in	r24, 0x14	; 20
     168:	8f 63       	ori	r24, 0x3F	; 63
     16a:	84 bb       	out	0x14, r24	; 20
     16c:	85 b3       	in	r24, 0x15	; 21
     16e:	80 7c       	andi	r24, 0xC0	; 192
     170:	85 bb       	out	0x15, r24	; 21
     172:	82 b1       	in	r24, 0x02	; 2
     174:	8f 63       	ori	r24, 0x3F	; 63
     176:	82 b9       	out	0x02, r24	; 2
     178:	8b b3       	in	r24, 0x1b	; 27
     17a:	80 7c       	andi	r24, 0xC0	; 192
     17c:	8b bb       	out	0x1b, r24	; 27
     17e:	82 b1       	in	r24, 0x02	; 2
     180:	80 64       	ori	r24, 0x40	; 64
     182:	82 b9       	out	0x02, r24	; 2
     184:	83 b1       	in	r24, 0x03	; 3
     186:	80 64       	ori	r24, 0x40	; 64
     188:	83 b9       	out	0x03, r24	; 3
     18a:	78 94       	sei
     18c:	08 95       	ret

0000018e <MainScreen>:
     18e:	10 d5       	rcall	.+2592   	; 0xbb0 <LCDClear2>
     190:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	ee 0f       	add	r30, r30
     198:	ff 1f       	adc	r31, r31
     19a:	e8 53       	subi	r30, 0x38	; 56
     19c:	fc 4f       	sbci	r31, 0xFC	; 252
     19e:	40 81       	ld	r20, Z
     1a0:	51 81       	ldd	r21, Z+1	; 0x01
     1a2:	60 e4       	ldi	r22, 0x40	; 64
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	84 e0       	ldi	r24, 0x04	; 4
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	54 c5       	rjmp	.+2728   	; 0xc54 <putsxy2>
     1ac:	08 95       	ret

000001ae <StandByScreen>:
     1ae:	00 d5       	rcall	.+2560   	; 0xbb0 <LCDClear2>
     1b0:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e0 54       	subi	r30, 0x40	; 64
     1bc:	fc 4f       	sbci	r31, 0xFC	; 252
     1be:	40 81       	ld	r20, Z
     1c0:	51 81       	ldd	r21, Z+1	; 0x01
     1c2:	60 e4       	ldi	r22, 0x40	; 64
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	44 d5       	rcall	.+2696   	; 0xc54 <putsxy2>
     1cc:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	32 96       	adiw	r30, 0x02	; 2
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	e0 54       	subi	r30, 0x40	; 64
     1da:	fc 4f       	sbci	r31, 0xFC	; 252
     1dc:	40 81       	ld	r20, Z
     1de:	51 81       	ldd	r21, Z+1	; 0x01
     1e0:	60 e1       	ldi	r22, 0x10	; 16
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	35 c5       	rjmp	.+2666   	; 0xc54 <putsxy2>
     1ea:	08 95       	ret

000001ec <Start>:
     1ec:	e1 d4       	rcall	.+2498   	; 0xbb0 <LCDClear2>
     1ee:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ee 0f       	add	r30, r30
     1f6:	ff 1f       	adc	r31, r31
     1f8:	e0 55       	subi	r30, 0x50	; 80
     1fa:	fc 4f       	sbci	r31, 0xFC	; 252
     1fc:	40 81       	ld	r20, Z
     1fe:	51 81       	ldd	r21, Z+1	; 0x01
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	25 d5       	rcall	.+2634   	; 0xc54 <putsxy2>
     20a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	32 96       	adiw	r30, 0x02	; 2
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	e0 55       	subi	r30, 0x50	; 80
     218:	fc 4f       	sbci	r31, 0xFC	; 252
     21a:	40 81       	ld	r20, Z
     21c:	51 81       	ldd	r21, Z+1	; 0x01
     21e:	60 e4       	ldi	r22, 0x40	; 64
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	16 d5       	rcall	.+2604   	; 0xc54 <putsxy2>
     228:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	34 96       	adiw	r30, 0x04	; 4
     230:	ee 0f       	add	r30, r30
     232:	ff 1f       	adc	r31, r31
     234:	e0 55       	subi	r30, 0x50	; 80
     236:	fc 4f       	sbci	r31, 0xFC	; 252
     238:	40 81       	ld	r20, Z
     23a:	51 81       	ldd	r21, Z+1	; 0x01
     23c:	60 e1       	ldi	r22, 0x10	; 16
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	07 c5       	rjmp	.+2574   	; 0xc54 <putsxy2>
     246:	08 95       	ret

00000248 <Finished>:
     248:	b3 d4       	rcall	.+2406   	; 0xbb0 <LCDClear2>
     24a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	e8 55       	subi	r30, 0x58	; 88
     256:	fc 4f       	sbci	r31, 0xFC	; 252
     258:	40 81       	ld	r20, Z
     25a:	51 81       	ldd	r21, Z+1	; 0x01
     25c:	60 e4       	ldi	r22, 0x40	; 64
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	f7 d4       	rcall	.+2542   	; 0xc54 <putsxy2>
     266:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	32 96       	adiw	r30, 0x02	; 2
     26e:	ee 0f       	add	r30, r30
     270:	ff 1f       	adc	r31, r31
     272:	e8 55       	subi	r30, 0x58	; 88
     274:	fc 4f       	sbci	r31, 0xFC	; 252
     276:	40 81       	ld	r20, Z
     278:	51 81       	ldd	r21, Z+1	; 0x01
     27a:	60 e1       	ldi	r22, 0x10	; 16
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	e8 d4       	rcall	.+2512   	; 0xc54 <putsxy2>
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	95 e7       	ldi	r25, 0x75	; 117
     288:	05 c0       	rjmp	.+10     	; 0x294 <Finished+0x4c>
     28a:	e8 ec       	ldi	r30, 0xC8	; 200
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	31 97       	sbiw	r30, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <Finished+0x46>
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	c9 f7       	brne	.-14     	; 0x28a <Finished+0x42>
     298:	08 95       	ret

0000029a <Measurement_v2>:

//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция стробирования одного из каналов
// возвращает номер следующего канала
uint8_t Measurement_v2(uint8_t channel)
{
     29a:	8f 92       	push	r8
     29c:	9f 92       	push	r9
     29e:	af 92       	push	r10
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	c8 2f       	mov	r28, r24
	if(channel >= 0 && channel < 12) {
     2b4:	8c 30       	cpi	r24, 0x0C	; 12
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <Measurement_v2+0x20>
     2b8:	a2 c0       	rjmp	.+324    	; 0x3fe <Measurement_v2+0x164>
		// выводим номер измерения
		putsxy2(14, LINE1, number_main_ch[channel]);
     2ba:	08 2f       	mov	r16, r24
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	f8 01       	movw	r30, r16
     2c0:	ee 0f       	add	r30, r30
     2c2:	ff 1f       	adc	r31, r31
     2c4:	e0 57       	subi	r30, 0x70	; 112
     2c6:	fc 4f       	sbci	r31, 0xFC	; 252
     2c8:	40 81       	ld	r20, Z
     2ca:	51 81       	ldd	r21, Z+1	; 0x01
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	8e e0       	ldi	r24, 0x0E	; 14
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	bf d4       	rcall	.+2430   	; 0xc54 <putsxy2>
		if(channel < 6) {
     2d6:	c6 30       	cpi	r28, 0x06	; 6
     2d8:	80 f4       	brcc	.+32     	; 0x2fa <Measurement_v2+0x60>
			DDRA |= (1 << channel);
     2da:	2a b3       	in	r18, 0x1a	; 26
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0c 2e       	mov	r0, r28
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <Measurement_v2+0x4e>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <Measurement_v2+0x4a>
     2ec:	92 2f       	mov	r25, r18
     2ee:	98 2b       	or	r25, r24
     2f0:	9a bb       	out	0x1a, r25	; 26
			PORTA |= (1 << channel);
     2f2:	9b b3       	in	r25, 0x1b	; 27
     2f4:	89 2b       	or	r24, r25
     2f6:	8b bb       	out	0x1b, r24	; 27
     2f8:	11 c0       	rjmp	.+34     	; 0x31c <Measurement_v2+0x82>
		} else {
			DDRB |= (1 << (channel - 6));
     2fa:	27 b3       	in	r18, 0x17	; 23
     2fc:	a8 01       	movw	r20, r16
     2fe:	46 50       	subi	r20, 0x06	; 6
     300:	51 09       	sbc	r21, r1
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	02 c0       	rjmp	.+4      	; 0x30c <Measurement_v2+0x72>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	4a 95       	dec	r20
     30e:	e2 f7       	brpl	.-8      	; 0x308 <Measurement_v2+0x6e>
     310:	92 2f       	mov	r25, r18
     312:	98 2b       	or	r25, r24
     314:	97 bb       	out	0x17, r25	; 23
			PORTB |= (1 << (channel - 6));
     316:	98 b3       	in	r25, 0x18	; 24
     318:	89 2b       	or	r24, r25
     31a:	88 bb       	out	0x18, r24	; 24
		}
		
		// выводим номер термопары
		putsxy2(14, LINE2, number_main_ch[channel]);
     31c:	f8 01       	movw	r30, r16
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	e0 57       	subi	r30, 0x70	; 112
     324:	fc 4f       	sbci	r31, 0xFC	; 252
     326:	40 81       	ld	r20, Z
     328:	51 81       	ldd	r21, Z+1	; 0x01
     32a:	60 e4       	ldi	r22, 0x40	; 64
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	8e e0       	ldi	r24, 0x0E	; 14
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 d4       	rcall	.+2336   	; 0xc54 <putsxy2>
		
		// стробируем
		PORTE &= ~(1 << PORTE6);
     334:	83 b1       	in	r24, 0x03	; 3
     336:	8f 7b       	andi	r24, 0xBF	; 191
     338:	83 b9       	out	0x03, r24	; 3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <Measurement_v2+0xa2>
		_delay_us(1);
		PORTE |= (1 << PORTE6);
     340:	83 b1       	in	r24, 0x03	; 3
     342:	80 64       	ori	r24, 0x40	; 64
     344:	83 b9       	out	0x03, r24	; 3
		
		_delay_ms(Delay);							// выдерживаем пауза заданную в настойках
     346:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <Delay>
     34a:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <Delay+0x1>
     34e:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <Delay+0x2>
     352:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <Delay+0x3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	4a ef       	ldi	r20, 0xFA	; 250
     35c:	54 e4       	ldi	r21, 0x44	; 68
     35e:	c5 01       	movw	r24, r10
     360:	b4 01       	movw	r22, r8
     362:	d3 d6       	rcall	.+3494   	; 0x110a <__mulsf3>
     364:	6b 01       	movw	r12, r22
     366:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e8       	ldi	r20, 0x80	; 128
     36e:	5f e3       	ldi	r21, 0x3F	; 63
     370:	4b d6       	rcall	.+3222   	; 0x1008 <__cmpsf2>
     372:	88 23       	and	r24, r24
     374:	04 f1       	brlt	.+64     	; 0x3b6 <Measurement_v2+0x11c>
		__ticks = 1;
	else if (__tmp > 65535)
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	3f ef       	ldi	r19, 0xFF	; 255
     37a:	4f e7       	ldi	r20, 0x7F	; 127
     37c:	57 e4       	ldi	r21, 0x47	; 71
     37e:	c7 01       	movw	r24, r14
     380:	b6 01       	movw	r22, r12
     382:	bf d6       	rcall	.+3454   	; 0x1102 <__gesf2>
     384:	18 16       	cp	r1, r24
     386:	9c f4       	brge	.+38     	; 0x3ae <Measurement_v2+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e2       	ldi	r20, 0x20	; 32
     38e:	51 e4       	ldi	r21, 0x41	; 65
     390:	c5 01       	movw	r24, r10
     392:	b4 01       	movw	r22, r8
     394:	ba d6       	rcall	.+3444   	; 0x110a <__mulsf3>
     396:	3c d6       	rcall	.+3192   	; 0x1010 <__fixunssfsi>
     398:	06 c0       	rjmp	.+12     	; 0x3a6 <Measurement_v2+0x10c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     39a:	88 ec       	ldi	r24, 0xC8	; 200
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <Measurement_v2+0x104>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a2:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	71 09       	sbc	r23, r1
     3a6:	61 15       	cp	r22, r1
     3a8:	71 05       	cpc	r23, r1
     3aa:	b9 f7       	brne	.-18     	; 0x39a <Measurement_v2+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <Measurement_v2+0x126>
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	2e d6       	rcall	.+3164   	; 0x1010 <__fixunssfsi>
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Measurement_v2+0x120>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	cb 01       	movw	r24, r22
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <Measurement_v2+0x122>

		// закрываем главный канал
		if(channel < 6)
     3c0:	c6 30       	cpi	r28, 0x06	; 6
     3c2:	68 f4       	brcc	.+26     	; 0x3de <Measurement_v2+0x144>
			PORTA &= ~(1 << channel);
     3c4:	2b b3       	in	r18, 0x1b	; 27
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0c 2e       	mov	r0, r28
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <Measurement_v2+0x138>
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	0a 94       	dec	r0
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <Measurement_v2+0x134>
     3d6:	80 95       	com	r24
     3d8:	82 23       	and	r24, r18
     3da:	8b bb       	out	0x1b, r24	; 27
     3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <Measurement_v2+0x15e>
		else
			PORTB &= ~(1 << (channel - 6));
     3de:	28 b3       	in	r18, 0x18	; 24
     3e0:	06 50       	subi	r16, 0x06	; 6
     3e2:	11 09       	sbc	r17, r1
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <Measurement_v2+0x154>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 95       	dec	r16
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <Measurement_v2+0x150>
     3f2:	80 95       	com	r24
     3f4:	82 23       	and	r24, r18
     3f6:	88 bb       	out	0x18, r24	; 24
		
		return 	(channel + 12);
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	8c 0f       	add	r24, r28
     3fc:	a5 c0       	rjmp	.+330    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
	} else if(channel >= 12 && channel < 24) {
     3fe:	d4 ef       	ldi	r29, 0xF4	; 244
     400:	d8 0f       	add	r29, r24
     402:	dc 30       	cpi	r29, 0x0C	; 12
     404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	9e c0       	rjmp	.+316    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
		channel = channel - 12;
		// включаем подканал 1
		putsxy2(14, LINE3, channel_1[channel]);		// выводим номер канала в напряжении1
     408:	0d 2f       	mov	r16, r29
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	f8 01       	movw	r30, r16
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e8 58       	subi	r30, 0x88	; 136
     414:	fc 4f       	sbci	r31, 0xFC	; 252
     416:	40 81       	ld	r20, Z
     418:	51 81       	ldd	r21, Z+1	; 0x01
     41a:	60 e1       	ldi	r22, 0x10	; 16
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	8e e0       	ldi	r24, 0x0E	; 14
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	18 d4       	rcall	.+2096   	; 0xc54 <putsxy2>
		if(channel < 6) {
     424:	d6 30       	cpi	r29, 0x06	; 6
     426:	a0 f4       	brcc	.+40     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			DDRF |= (1 << channel);
     428:	e1 e6       	ldi	r30, 0x61	; 97
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	20 81       	ld	r18, Z
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0d 2e       	mov	r0, r29
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	92 2f       	mov	r25, r18
     440:	98 2b       	or	r25, r24
     442:	90 83       	st	Z, r25
			PORTF |= (1 << channel);
     444:	e2 e6       	ldi	r30, 0x62	; 98
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	90 81       	ld	r25, Z
     44a:	89 2b       	or	r24, r25
     44c:	80 83       	st	Z, r24
     44e:	11 c0       	rjmp	.+34     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		} else {
			DDRD |= (1 << (channel - 6));
     450:	21 b3       	in	r18, 0x11	; 17
     452:	a8 01       	movw	r20, r16
     454:	46 50       	subi	r20, 0x06	; 6
     456:	51 09       	sbc	r21, r1
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	4a 95       	dec	r20
     464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	92 2f       	mov	r25, r18
     468:	98 2b       	or	r25, r24
     46a:	91 bb       	out	0x11, r25	; 17
			PORTD |= (1 << (channel - 6));
     46c:	92 b3       	in	r25, 0x12	; 18
     46e:	89 2b       	or	r24, r25
     470:	82 bb       	out	0x12, r24	; 18
		}
		
		// стробируем
		PORTE &= ~(1 << PORTE6);
     472:	83 b1       	in	r24, 0x03	; 3
     474:	8f 7b       	andi	r24, 0xBF	; 191
     476:	83 b9       	out	0x03, r24	; 3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	8a 95       	dec	r24
     47c:	f1 f7       	brne	.-4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		_delay_us(1);
		PORTE |= (1 << PORTE6);
     47e:	83 b1       	in	r24, 0x03	; 3
     480:	80 64       	ori	r24, 0x40	; 64
     482:	83 b9       	out	0x03, r24	; 3
		
		_delay_ms(Delay);						// выдерживаем пауза заданную в настойках
     484:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <Delay>
     488:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <Delay+0x1>
     48c:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <Delay+0x2>
     490:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <Delay+0x3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	4a ef       	ldi	r20, 0xFA	; 250
     49a:	54 e4       	ldi	r21, 0x44	; 68
     49c:	c5 01       	movw	r24, r10
     49e:	b4 01       	movw	r22, r8
     4a0:	34 d6       	rcall	.+3176   	; 0x110a <__mulsf3>
     4a2:	6b 01       	movw	r12, r22
	if (__tmp < 1.0)
     4a4:	7c 01       	movw	r14, r24
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e8       	ldi	r20, 0x80	; 128
     4ac:	5f e3       	ldi	r21, 0x3F	; 63
     4ae:	ac d5       	rcall	.+2904   	; 0x1008 <__cmpsf2>
     4b0:	88 23       	and	r24, r24
		__ticks = 1;
	else if (__tmp > 65535)
     4b2:	04 f1       	brlt	.+64     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	3f ef       	ldi	r19, 0xFF	; 255
     4b8:	4f e7       	ldi	r20, 0x7F	; 127
     4ba:	57 e4       	ldi	r21, 0x47	; 71
     4bc:	c7 01       	movw	r24, r14
     4be:	b6 01       	movw	r22, r12
     4c0:	20 d6       	rcall	.+3136   	; 0x1102 <__gesf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4c2:	18 16       	cp	r1, r24
     4c4:	9c f4       	brge	.+38     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e2       	ldi	r20, 0x20	; 32
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	c5 01       	movw	r24, r10
     4d0:	b4 01       	movw	r22, r8
     4d2:	1b d6       	rcall	.+3126   	; 0x110a <__mulsf3>
     4d4:	9d d5       	rcall	.+2874   	; 0x1010 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4d8:	88 ec       	ldi	r24, 0xC8	; 200
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	01 97       	sbiw	r24, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4de:	f1 f7       	brne	.-4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4e0:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e2:	71 09       	sbc	r23, r1
     4e4:	61 15       	cp	r22, r1
     4e6:	71 05       	cpc	r23, r1
     4e8:	b9 f7       	brne	.-18     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4ec:	c7 01       	movw	r24, r14
     4ee:	b6 01       	movw	r22, r12
     4f0:	8f d5       	rcall	.+2846   	; 0x1010 <__fixunssfsi>
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	cb 01       	movw	r24, r22
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		
		// закрываем подканал 1
		if(channel < 6)
     4fe:	d6 30       	cpi	r29, 0x06	; 6
     500:	78 f4       	brcc	.+30     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			PORTF &= ~(1 << channel);
     502:	e2 e6       	ldi	r30, 0x62	; 98
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	20 81       	ld	r18, Z
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0d 2e       	mov	r0, r29
     50e:	02 c0       	rjmp	.+4      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     518:	80 95       	com	r24
     51a:	82 23       	and	r24, r18
     51c:	80 83       	st	Z, r24
     51e:	0d c0       	rjmp	.+26     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		else
			PORTD &= ~(1 << (channel - 6));
     520:	22 b3       	in	r18, 0x12	; 18
     522:	06 50       	subi	r16, 0x06	; 6
     524:	11 09       	sbc	r17, r1
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	0a 95       	dec	r16
     532:	e2 f7       	brpl	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
     534:	80 95       	com	r24
     536:	82 23       	and	r24, r18
     538:	82 bb       	out	0x12, r24	; 18
		
		if(channel == 11) return (LAST_CHANNEL);
     53a:	db 30       	cpi	r29, 0x0B	; 11
     53c:	21 f0       	breq	.+8      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
		return 	(channel + 1);
     53e:	85 ef       	ldi	r24, 0xF5	; 245
     540:	8c 0f       	add	r24, r28
     542:	02 c0       	rjmp	.+4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
			PORTE &= ~(1 << (channel - 6));
		
		if(channel == 11) return (LAST_CHANNEL);
		return 	(channel + 1);
	}*/
}
     544:	01 c0       	rjmp	.+2      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		if(channel < 6)
			PORTF &= ~(1 << channel);
		else
			PORTD &= ~(1 << (channel - 6));
		
		if(channel == 11) return (LAST_CHANNEL);
     546:	88 e1       	ldi	r24, 0x18	; 24
			PORTE &= ~(1 << (channel - 6));
		
		if(channel == 11) return (LAST_CHANNEL);
		return 	(channel + 1);
	}*/
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	bf 90       	pop	r11
     55a:	af 90       	pop	r10
     55c:	9f 90       	pop	r9
     55e:	8f 90       	pop	r8
     560:	08 95       	ret

00000562 <LoadOptionScreen>:

//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция вывода настроек на экран
static char *string4[] = {"    Уставки:", "    Set up:", "Русский", "English", "Режим отладки", "Debugging mode"};
void LoadOptionScreen(uint8_t currentLine)
{
     562:	cf 93       	push	r28
     564:	c8 2f       	mov	r28, r24
	LCDClear2();				// Очищаем экран
     566:	24 d3       	rcall	.+1608   	; 0xbb0 <LCDClear2>
	
	putsxy2(0, LINE1, string4[0 + Language]);
     568:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	e4 59       	subi	r30, 0x94	; 148
     574:	fc 4f       	sbci	r31, 0xFC	; 252
     576:	40 81       	ld	r20, Z
     578:	51 81       	ldd	r21, Z+1	; 0x01
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	68 d3       	rcall	.+1744   	; 0xc54 <putsxy2>
	putsxy2(1, LINE2, string4[2]);
     584:	44 e1       	ldi	r20, 0x14	; 20
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	60 e4       	ldi	r22, 0x40	; 64
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	61 d3       	rcall	.+1730   	; 0xc54 <putsxy2>
	putsxy2(1, LINE3, string4[3]);
     592:	4c e1       	ldi	r20, 0x1C	; 28
     594:	51 e0       	ldi	r21, 0x01	; 1
     596:	60 e1       	ldi	r22, 0x10	; 16
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	5a d3       	rcall	.+1716   	; 0xc54 <putsxy2>
	putsxy2(1, LINE4, string4[4 + Language]);
     5a0:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	34 96       	adiw	r30, 0x04	; 4
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	e4 59       	subi	r30, 0x94	; 148
     5ae:	fc 4f       	sbci	r31, 0xFC	; 252
     5b0:	40 81       	ld	r20, Z
     5b2:	51 81       	ldd	r21, Z+1	; 0x01
     5b4:	60 e5       	ldi	r22, 0x50	; 80
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	4b d3       	rcall	.+1686   	; 0xc54 <putsxy2>
	
	putcxy2(0, currentLine, 0x90);
     5be:	6c 2f       	mov	r22, r28
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	40 e9       	ldi	r20, 0x90	; 144
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	5b d3       	rcall	.+1718   	; 0xc82 <putcxy2>
}
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <ChangeOptions>:

//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция сдвига курсора в меню настроек
uint8_t ChangeOptions(uint8_t currentLine)
{
	switch(currentLine)
     5d0:	80 34       	cpi	r24, 0x40	; 64
     5d2:	29 f0       	breq	.+10     	; 0x5de <ChangeOptions+0xe>
     5d4:	80 35       	cpi	r24, 0x50	; 80
     5d6:	31 f1       	breq	.+76     	; 0x624 <ChangeOptions+0x54>
     5d8:	80 31       	cpi	r24, 0x10	; 16
     5da:	b1 f5       	brne	.+108    	; 0x648 <ChangeOptions+0x78>
     5dc:	13 c0       	rjmp	.+38     	; 0x604 <ChangeOptions+0x34>
	{
		case LINE2:
			putcxy2(0, LINE2, 0x20);
     5de:	40 e2       	ldi	r20, 0x20	; 32
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	60 e4       	ldi	r22, 0x40	; 64
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	4b d3       	rcall	.+1686   	; 0xc82 <putcxy2>
			putcxy2(0, LINE3, 0x90);
     5ec:	40 e9       	ldi	r20, 0x90	; 144
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	60 e1       	ldi	r22, 0x10	; 16
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	44 d3       	rcall	.+1672   	; 0xc82 <putcxy2>
			Language = ENGLISH;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <Language>
			return LINE3;
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	08 95       	ret
			
		case LINE3:
			putcxy2(0, LINE3, 0x20);
     604:	40 e2       	ldi	r20, 0x20	; 32
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e1       	ldi	r22, 0x10	; 16
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	38 d3       	rcall	.+1648   	; 0xc82 <putcxy2>
			putcxy2(0, LINE4, 0x90);
     612:	40 e9       	ldi	r20, 0x90	; 144
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	60 e5       	ldi	r22, 0x50	; 80
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	31 d3       	rcall	.+1634   	; 0xc82 <putcxy2>
			//Language = RUSSIAN;
			return LINE4;
     620:	80 e5       	ldi	r24, 0x50	; 80
     622:	08 95       	ret
			
		case LINE4:
			putcxy2(0, LINE4, 0x20);
     624:	40 e2       	ldi	r20, 0x20	; 32
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	60 e5       	ldi	r22, 0x50	; 80
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	28 d3       	rcall	.+1616   	; 0xc82 <putcxy2>
			putcxy2(0, LINE2, 0x90);
     632:	40 e9       	ldi	r20, 0x90	; 144
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e4       	ldi	r22, 0x40	; 64
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	21 d3       	rcall	.+1602   	; 0xc82 <putcxy2>
			Language = RUSSIAN;
     640:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <Language>
			return LINE2;
     644:	80 e4       	ldi	r24, 0x40	; 64
     646:	08 95       	ret
	}
}
     648:	08 95       	ret

0000064a <SaveScreen>:
//----------------------------------------/ FUNCTION /----------------------------------------------
// Выводим экран "Сохранено"
static char *string5[] = {"   Сохранено    ", "      Saved     "};
void SaveScreen()
{
	LCDClear2();				// Очищаем экран
     64a:	b2 d2       	rcall	.+1380   	; 0xbb0 <LCDClear2>
	
	putsxy2(0, LINE2, string5[0 + Language]);
     64c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	e8 59       	subi	r30, 0x98	; 152
     658:	fc 4f       	sbci	r31, 0xFC	; 252
     65a:	40 81       	ld	r20, Z
     65c:	51 81       	ldd	r21, Z+1	; 0x01
     65e:	60 e4       	ldi	r22, 0x40	; 64
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	f6 d2       	rcall	.+1516   	; 0xc54 <putsxy2>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     668:	88 e9       	ldi	r24, 0x98	; 152
     66a:	9a e3       	ldi	r25, 0x3A	; 58
     66c:	05 c0       	rjmp	.+10     	; 0x678 <SaveScreen+0x2e>
     66e:	e8 ec       	ldi	r30, 0xC8	; 200
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <SaveScreen+0x28>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	c9 f7       	brne	.-14     	; 0x66e <SaveScreen+0x24>
	
	_delay_ms(1500);
}
     67c:	08 95       	ret

0000067e <DebugScreen>:
//----------------------------------------/ FUNCTION /----------------------------------------------
// Выводим экран "Режим отладки"
static char *string6[] = {" Режим отладки  ", " Debugging mode ", "Канал ", "Channel "};
void DebugScreen()
{
	LCDClear2();				// Очищаем экран
     67e:	98 d2       	rcall	.+1328   	; 0xbb0 <LCDClear2>
	putsxy2(0, LINE1, string6[0 + Language]);
     680:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	e0 5a       	subi	r30, 0xA0	; 160
     68c:	fc 4f       	sbci	r31, 0xFC	; 252
     68e:	40 81       	ld	r20, Z
     690:	51 81       	ldd	r21, Z+1	; 0x01
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	dc d2       	rcall	.+1464   	; 0xc54 <putsxy2>
	putsxy2(0, LINE2, string6[2 + Language]);
     69c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	32 96       	adiw	r30, 0x02	; 2
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	e0 5a       	subi	r30, 0xA0	; 160
     6aa:	fc 4f       	sbci	r31, 0xFC	; 252
     6ac:	40 81       	ld	r20, Z
     6ae:	51 81       	ldd	r21, Z+1	; 0x01
     6b0:	60 e4       	ldi	r22, 0x40	; 64
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	cd d2       	rcall	.+1434   	; 0xc54 <putsxy2>
	
	putsxy2(8, LINE2, number_main_ch[0]);
     6ba:	44 e2       	ldi	r20, 0x24	; 36
     6bc:	51 e0       	ldi	r21, 0x01	; 1
     6be:	60 e4       	ldi	r22, 0x40	; 64
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	c6 c2       	rjmp	.+1420   	; 0xc54 <putsxy2>
     6c8:	08 95       	ret

000006ca <ChangeDebugChannelOnSCreen>:
}
//----------------------------------------/ FUNCTION /----------------------------------------------
void ChangeDebugChannelOnSCreen(uint8_t *channel)
{
     6ca:	fc 01       	movw	r30, r24
	*channel = *channel + 1;
     6cc:	90 81       	ld	r25, Z
     6ce:	9f 5f       	subi	r25, 0xFF	; 255
     6d0:	90 83       	st	Z, r25
	if(*channel == 12) *channel = 0;
     6d2:	9c 30       	cpi	r25, 0x0C	; 12
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <ChangeDebugChannelOnSCreen+0xe>
     6d6:	10 82       	st	Z, r1
	
	putsxy2(8, LINE2, number_main_ch[*channel]);
     6d8:	e0 81       	ld	r30, Z
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	e0 57       	subi	r30, 0x70	; 112
     6e2:	fc 4f       	sbci	r31, 0xFC	; 252
     6e4:	40 81       	ld	r20, Z
     6e6:	51 81       	ldd	r21, Z+1	; 0x01
     6e8:	60 e4       	ldi	r22, 0x40	; 64
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	b1 c2       	rjmp	.+1378   	; 0xc54 <putsxy2>
     6f2:	08 95       	ret

000006f4 <DebugChannelScreen>:
}
//----------------------------------------/ FUNCTION /----------------------------------------------
// Выводим на экран режим отладки конкретного канала
static char *string7[] = {"включить ", "turn on  ", "выключить", "turn off ", "выход", "exit "};
void DebugChannelScreen(uint8_t channel)
{
     6f4:	cf 93       	push	r28
     6f6:	c8 2f       	mov	r28, r24
	LCDClear2();				// Очищаем экран
     6f8:	5b d2       	rcall	.+1206   	; 0xbb0 <LCDClear2>
	putsxy2(0, LINE1, string6[0 + Language]);
     6fa:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	e0 5a       	subi	r30, 0xA0	; 160
     706:	fc 4f       	sbci	r31, 0xFC	; 252
     708:	40 81       	ld	r20, Z
     70a:	51 81       	ldd	r21, Z+1	; 0x01
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	9f d2       	rcall	.+1342   	; 0xc54 <putsxy2>
	putsxy2(0, LINE2, string6[2 + Language]);
     716:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	32 96       	adiw	r30, 0x02	; 2
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	e0 5a       	subi	r30, 0xA0	; 160
     724:	fc 4f       	sbci	r31, 0xFC	; 252
     726:	40 81       	ld	r20, Z
     728:	51 81       	ldd	r21, Z+1	; 0x01
     72a:	60 e4       	ldi	r22, 0x40	; 64
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	90 d2       	rcall	.+1312   	; 0xc54 <putsxy2>
	putsxy2(8, LINE2, number_main_ch[channel]);
     734:	ec 2f       	mov	r30, r28
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	e0 57       	subi	r30, 0x70	; 112
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
     740:	40 81       	ld	r20, Z
     742:	51 81       	ldd	r21, Z+1	; 0x01
     744:	60 e4       	ldi	r22, 0x40	; 64
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	88 e0       	ldi	r24, 0x08	; 8
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	83 d2       	rcall	.+1286   	; 0xc54 <putsxy2>
	putsxy2(10, LINE2, ":");
     74e:	46 ec       	ldi	r20, 0xC6	; 198
     750:	51 e0       	ldi	r21, 0x01	; 1
     752:	60 e4       	ldi	r22, 0x40	; 64
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	8a e0       	ldi	r24, 0x0A	; 10
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	7c d2       	rcall	.+1272   	; 0xc54 <putsxy2>
	putsxy2(1, LINE3, string7[0 + Language]);
     75c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	ec 5a       	subi	r30, 0xAC	; 172
     768:	fc 4f       	sbci	r31, 0xFC	; 252
     76a:	40 81       	ld	r20, Z
     76c:	51 81       	ldd	r21, Z+1	; 0x01
     76e:	60 e1       	ldi	r22, 0x10	; 16
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	6e d2       	rcall	.+1244   	; 0xc54 <putsxy2>
	putsxy2(1, LINE4, string7[4 + Language]);
     778:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	34 96       	adiw	r30, 0x04	; 4
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ec 5a       	subi	r30, 0xAC	; 172
     786:	fc 4f       	sbci	r31, 0xFC	; 252
     788:	40 81       	ld	r20, Z
     78a:	51 81       	ldd	r21, Z+1	; 0x01
     78c:	60 e5       	ldi	r22, 0x50	; 80
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	5f d2       	rcall	.+1214   	; 0xc54 <putsxy2>
	
	putcxy2(0, LINE3, 0x90);
     796:	40 e9       	ldi	r20, 0x90	; 144
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	60 e1       	ldi	r22, 0x10	; 16
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	6f d2       	rcall	.+1246   	; 0xc82 <putcxy2>
     7a4:	cf 91       	pop	r28
}
     7a6:	08 95       	ret

000007a8 <ChangeMenuDebugChannel>:
     7a8:	cf 93       	push	r28
//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция сдвига курсора в режиме отладки канала
void ChangeMenuDebugChannel(uint8_t *currentNameLine)
{
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
	switch(*currentNameLine)
     7ae:	88 81       	ld	r24, Y
     7b0:	80 31       	cpi	r24, 0x10	; 16
     7b2:	19 f0       	breq	.+6      	; 0x7ba <ChangeMenuDebugChannel+0x12>
     7b4:	80 35       	cpi	r24, 0x50	; 80
     7b6:	91 f0       	breq	.+36     	; 0x7dc <ChangeMenuDebugChannel+0x34>
     7b8:	21 c0       	rjmp	.+66     	; 0x7fc <ChangeMenuDebugChannel+0x54>
	{
		case LINE3:						// если выбрана строка меню "включить" или "выключить" 
			putcxy2(0, LINE3, 0x20);
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e1       	ldi	r22, 0x10	; 16
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	5d d2       	rcall	.+1210   	; 0xc82 <putcxy2>
			putcxy2(0, LINE4, 0x90);
     7c8:	40 e9       	ldi	r20, 0x90	; 144
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 e5       	ldi	r22, 0x50	; 80
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	56 d2       	rcall	.+1196   	; 0xc82 <putcxy2>
			*currentNameLine = LINE4;
     7d6:	80 e5       	ldi	r24, 0x50	; 80
     7d8:	88 83       	st	Y, r24
			break;
     7da:	10 c0       	rjmp	.+32     	; 0x7fc <ChangeMenuDebugChannel+0x54>
		
		case LINE4:
			putcxy2(0, LINE4, 0x20);
     7dc:	40 e2       	ldi	r20, 0x20	; 32
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	60 e5       	ldi	r22, 0x50	; 80
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	4c d2       	rcall	.+1176   	; 0xc82 <putcxy2>
			putcxy2(0, LINE3, 0x90);
     7ea:	40 e9       	ldi	r20, 0x90	; 144
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 e1       	ldi	r22, 0x10	; 16
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	45 d2       	rcall	.+1162   	; 0xc82 <putcxy2>
			*currentNameLine = LINE3;
     7f8:	80 e1       	ldi	r24, 0x10	; 16
     7fa:	88 83       	st	Y, r24
			break;
	}	
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <StartMeasurementSingleChannel>:
//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция старта стробирования одного из каналов
void StartMeasurementSingleChannel(uint8_t channel)
{
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	cf 93       	push	r28
     814:	c8 2f       	mov	r28, r24
	putsxy2(1, LINE3, string7[2 + Language]);	// меняем пункт меню на "выключить"
     816:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	32 96       	adiw	r30, 0x02	; 2
     81e:	ee 0f       	add	r30, r30
     820:	ff 1f       	adc	r31, r31
     822:	ec 5a       	subi	r30, 0xAC	; 172
     824:	fc 4f       	sbci	r31, 0xFC	; 252
     826:	40 81       	ld	r20, Z
     828:	51 81       	ldd	r21, Z+1	; 0x01
     82a:	60 e1       	ldi	r22, 0x10	; 16
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	10 d2       	rcall	.+1056   	; 0xc54 <putsxy2>
	
	if(channel < 6) {
     834:	c6 30       	cpi	r28, 0x06	; 6
     836:	80 f4       	brcc	.+32     	; 0x858 <StartMeasurementSingleChannel+0x56>
		DDRA |= (1 << channel);
     838:	2a b3       	in	r18, 0x1a	; 26
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0c 2e       	mov	r0, r28
     840:	02 c0       	rjmp	.+4      	; 0x846 <StartMeasurementSingleChannel+0x44>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	0a 94       	dec	r0
     848:	e2 f7       	brpl	.-8      	; 0x842 <StartMeasurementSingleChannel+0x40>
     84a:	92 2f       	mov	r25, r18
     84c:	98 2b       	or	r25, r24
     84e:	9a bb       	out	0x1a, r25	; 26
		PORTA |= (1 << channel);
     850:	9b b3       	in	r25, 0x1b	; 27
     852:	89 2b       	or	r24, r25
     854:	8b bb       	out	0x1b, r24	; 27
     856:	12 c0       	rjmp	.+36     	; 0x87c <StartMeasurementSingleChannel+0x7a>
	} else {
		DDRB |= (1 << (channel - 6));
     858:	27 b3       	in	r18, 0x17	; 23
     85a:	4c 2f       	mov	r20, r28
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	46 50       	subi	r20, 0x06	; 6
     860:	51 09       	sbc	r21, r1
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <StartMeasurementSingleChannel+0x6a>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	4a 95       	dec	r20
     86e:	e2 f7       	brpl	.-8      	; 0x868 <StartMeasurementSingleChannel+0x66>
     870:	92 2f       	mov	r25, r18
     872:	98 2b       	or	r25, r24
     874:	97 bb       	out	0x17, r25	; 23
		PORTB |= (1 << (channel - 6));
     876:	98 b3       	in	r25, 0x18	; 24
     878:	89 2b       	or	r24, r25
     87a:	88 bb       	out	0x18, r24	; 24
	}
	
	// стробируем
	PORTE &= ~(1 << PORTE6);
     87c:	83 b1       	in	r24, 0x03	; 3
     87e:	8f 7b       	andi	r24, 0xBF	; 191
     880:	83 b9       	out	0x03, r24	; 3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	8a 95       	dec	r24
     886:	f1 f7       	brne	.-4      	; 0x884 <StartMeasurementSingleChannel+0x82>
	_delay_us(1);
	PORTE |= (1 << PORTE6);
     888:	83 b1       	in	r24, 0x03	; 3
     88a:	80 64       	ori	r24, 0x40	; 64
     88c:	83 b9       	out	0x03, r24	; 3
		
	_delay_ms(Delay);							// выдерживаем пауза заданную в настойках
     88e:	80 90 10 01 	lds	r8, 0x0110	; 0x800110 <Delay>
     892:	90 90 11 01 	lds	r9, 0x0111	; 0x800111 <Delay+0x1>
     896:	a0 90 12 01 	lds	r10, 0x0112	; 0x800112 <Delay+0x2>
     89a:	b0 90 13 01 	lds	r11, 0x0113	; 0x800113 <Delay+0x3>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	4a ef       	ldi	r20, 0xFA	; 250
     8a4:	54 e4       	ldi	r21, 0x44	; 68
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	2f d4       	rcall	.+2142   	; 0x110a <__mulsf3>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e8       	ldi	r20, 0x80	; 128
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	a7 d3       	rcall	.+1870   	; 0x1008 <__cmpsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	04 f1       	brlt	.+64     	; 0x8fe <StartMeasurementSingleChannel+0xfc>
		__ticks = 1;
	else if (__tmp > 65535)
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	4f e7       	ldi	r20, 0x7F	; 127
     8c4:	57 e4       	ldi	r21, 0x47	; 71
     8c6:	c7 01       	movw	r24, r14
     8c8:	b6 01       	movw	r22, r12
     8ca:	1b d4       	rcall	.+2102   	; 0x1102 <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	9c f4       	brge	.+38     	; 0x8f6 <StartMeasurementSingleChannel+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e2       	ldi	r20, 0x20	; 32
     8d6:	51 e4       	ldi	r21, 0x41	; 65
     8d8:	c5 01       	movw	r24, r10
     8da:	b4 01       	movw	r22, r8
     8dc:	16 d4       	rcall	.+2092   	; 0x110a <__mulsf3>
     8de:	98 d3       	rcall	.+1840   	; 0x1010 <__fixunssfsi>
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <StartMeasurementSingleChannel+0xec>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8e2:	88 ec       	ldi	r24, 0xC8	; 200
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <StartMeasurementSingleChannel+0xe4>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8ea:	61 50       	subi	r22, 0x01	; 1
     8ec:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	61 15       	cp	r22, r1
     8f0:	71 05       	cpc	r23, r1
     8f2:	b9 f7       	brne	.-18     	; 0x8e2 <StartMeasurementSingleChannel+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8f4:	09 c0       	rjmp	.+18     	; 0x908 <StartMeasurementSingleChannel+0x106>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	8a d3       	rcall	.+1812   	; 0x1010 <__fixunssfsi>
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <StartMeasurementSingleChannel+0x100>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	cb 01       	movw	r24, r22
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <StartMeasurementSingleChannel+0x102>

	// закрываем главный канал
	if(channel < 6)
     908:	c6 30       	cpi	r28, 0x06	; 6
     90a:	68 f4       	brcc	.+26     	; 0x926 <StartMeasurementSingleChannel+0x124>
		PORTA &= ~(1 << channel);
     90c:	2b b3       	in	r18, 0x1b	; 27
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0c 2e       	mov	r0, r28
     914:	02 c0       	rjmp	.+4      	; 0x91a <StartMeasurementSingleChannel+0x118>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <StartMeasurementSingleChannel+0x114>
     91e:	80 95       	com	r24
     920:	82 23       	and	r24, r18
     922:	8b bb       	out	0x1b, r24	; 27
     924:	0f c0       	rjmp	.+30     	; 0x944 <StartMeasurementSingleChannel+0x142>
	else
		PORTB &= ~(1 << (channel - 6));
     926:	28 b3       	in	r18, 0x18	; 24
     928:	4c 2f       	mov	r20, r28
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	46 50       	subi	r20, 0x06	; 6
     92e:	51 09       	sbc	r21, r1
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	02 c0       	rjmp	.+4      	; 0x93a <StartMeasurementSingleChannel+0x138>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	4a 95       	dec	r20
     93c:	e2 f7       	brpl	.-8      	; 0x936 <StartMeasurementSingleChannel+0x134>
     93e:	80 95       	com	r24
     940:	82 23       	and	r24, r18
     942:	88 bb       	out	0x18, r24	; 24
	
	// включаем подканал 1
	if(channel < 6) {
     944:	c6 30       	cpi	r28, 0x06	; 6
     946:	98 f4       	brcc	.+38     	; 0x96e <StartMeasurementSingleChannel+0x16c>
		DDRF |= (1 << channel);
     948:	e1 e6       	ldi	r30, 0x61	; 97
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	20 81       	ld	r18, Z
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <StartMeasurementSingleChannel+0x156>
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	ca 95       	dec	r28
     95a:	e2 f7       	brpl	.-8      	; 0x954 <StartMeasurementSingleChannel+0x152>
     95c:	92 2f       	mov	r25, r18
     95e:	98 2b       	or	r25, r24
     960:	90 83       	st	Z, r25
		PORTF |= (1 << channel);
     962:	e2 e6       	ldi	r30, 0x62	; 98
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	90 81       	ld	r25, Z
     968:	89 2b       	or	r24, r25
     96a:	80 83       	st	Z, r24
     96c:	13 c0       	rjmp	.+38     	; 0x994 <StartMeasurementSingleChannel+0x192>
	} else {
		DDRD |= (1 << (channel - 6));
     96e:	41 b3       	in	r20, 0x11	; 17
     970:	8c 2f       	mov	r24, r28
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	06 97       	sbiw	r24, 0x06	; 6
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	b9 01       	movw	r22, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <StartMeasurementSingleChannel+0x180>
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	8a 95       	dec	r24
     984:	e2 f7       	brpl	.-8      	; 0x97e <StartMeasurementSingleChannel+0x17c>
     986:	cb 01       	movw	r24, r22
     988:	94 2f       	mov	r25, r20
     98a:	98 2b       	or	r25, r24
     98c:	91 bb       	out	0x11, r25	; 17
		PORTD |= (1 << (channel - 6));
     98e:	92 b3       	in	r25, 0x12	; 18
     990:	89 2b       	or	r24, r25
     992:	82 bb       	out	0x12, r24	; 18
	}

	// стробируем
	PORTE &= ~(1 << PORTE6);
     994:	83 b1       	in	r24, 0x03	; 3
     996:	8f 7b       	andi	r24, 0xBF	; 191
     998:	83 b9       	out	0x03, r24	; 3
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	8a 95       	dec	r24
     99e:	f1 f7       	brne	.-4      	; 0x99c <StartMeasurementSingleChannel+0x19a>
	_delay_us(1);
	PORTE |= (1 << PORTE6);					
     9a0:	83 b1       	in	r24, 0x03	; 3
     9a2:	80 64       	ori	r24, 0x40	; 64
     9a4:	83 b9       	out	0x03, r24	; 3
}
     9a6:	cf 91       	pop	r28
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	08 95       	ret

000009ba <StopMeasurementSingleChannel>:
//----------------------------------------/ FUNCTION /----------------------------------------------
// Функция остановки стробирования одного из каналов
void StopMeasurementSingleChannel(uint8_t channel)
{
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
	//DDRB |= (1 << PINB1);
	//PORTB |= (1 << PORTB1);
	
	putsxy2(1, LINE3, string7[0 + Language]);	// меняем пункт меню на "включить"
     9be:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Language>
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	ec 5a       	subi	r30, 0xAC	; 172
     9ca:	fc 4f       	sbci	r31, 0xFC	; 252
     9cc:	40 81       	ld	r20, Z
     9ce:	51 81       	ldd	r21, Z+1	; 0x01
     9d0:	60 e1       	ldi	r22, 0x10	; 16
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	3d d1       	rcall	.+634    	; 0xc54 <putsxy2>
	
	// закрываем подканал 1
	if(channel < 6)
     9da:	c6 30       	cpi	r28, 0x06	; 6
     9dc:	70 f4       	brcc	.+28     	; 0x9fa <StopMeasurementSingleChannel+0x40>
		PORTF &= ~(1 << channel);
     9de:	e2 e6       	ldi	r30, 0x62	; 98
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	20 81       	ld	r18, Z
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <StopMeasurementSingleChannel+0x34>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	ca 95       	dec	r28
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <StopMeasurementSingleChannel+0x30>
     9f2:	80 95       	com	r24
     9f4:	82 23       	and	r24, r18
     9f6:	80 83       	st	Z, r24
     9f8:	10 c0       	rjmp	.+32     	; 0xa1a <StopMeasurementSingleChannel+0x60>
	else
		PORTD &= ~(1 << (channel - 6));
     9fa:	42 b3       	in	r20, 0x12	; 18
     9fc:	8c 2f       	mov	r24, r28
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	06 97       	sbiw	r24, 0x06	; 6
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	b9 01       	movw	r22, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <StopMeasurementSingleChannel+0x54>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	8a 95       	dec	r24
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <StopMeasurementSingleChannel+0x50>
     a12:	cb 01       	movw	r24, r22
     a14:	80 95       	com	r24
     a16:	84 23       	and	r24, r20
     a18:	82 bb       	out	0x12, r24	; 18
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <LCDDataStrobe>:
{	
	// Устанавливаем курсор в заданную позицию
	LCDSendCMD(((y * 0x40) + x) | LCD_CMD_ADDRESS_LINE1);
	// посылка символа
	LCDSendData(ch);
}
     a1e:	8b b3       	in	r24, 0x1b	; 27
     a20:	80 64       	ori	r24, 0x40	; 64
     a22:	8b bb       	out	0x1b, r24	; 27
     a24:	85 e0       	ldi	r24, 0x05	; 5
     a26:	98 2f       	mov	r25, r24
     a28:	9a 95       	dec	r25
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCDDataStrobe+0xa>
     a2c:	9b b3       	in	r25, 0x1b	; 27
     a2e:	9f 7b       	andi	r25, 0xBF	; 191
     a30:	9b bb       	out	0x1b, r25	; 27
     a32:	8a 95       	dec	r24
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCDDataStrobe+0x14>
     a36:	08 95       	ret

00000a38 <LCDDataStrobe2>:
     a38:	8b b3       	in	r24, 0x1b	; 27
     a3a:	80 64       	ori	r24, 0x40	; 64
     a3c:	8b bb       	out	0x1b, r24	; 27
     a3e:	85 e0       	ldi	r24, 0x05	; 5
     a40:	98 2f       	mov	r25, r24
     a42:	9a 95       	dec	r25
     a44:	f1 f7       	brne	.-4      	; 0xa42 <LCDDataStrobe2+0xa>
     a46:	9b b3       	in	r25, 0x1b	; 27
     a48:	9f 7b       	andi	r25, 0xBF	; 191
     a4a:	9b bb       	out	0x1b, r25	; 27
     a4c:	8a 95       	dec	r24
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <LCDDataStrobe2+0x14>
     a50:	08 95       	ret

00000a52 <LCDReady>:
     a52:	8a b3       	in	r24, 0x1a	; 26
     a54:	80 7f       	andi	r24, 0xF0	; 240
     a56:	8a bb       	out	0x1a, r24	; 26
     a58:	8b b3       	in	r24, 0x1b	; 27
     a5a:	8f 77       	andi	r24, 0x7F	; 127
     a5c:	8b bb       	out	0x1b, r24	; 27
     a5e:	8b b3       	in	r24, 0x1b	; 27
     a60:	80 68       	ori	r24, 0x80	; 128
     a62:	8b bb       	out	0x1b, r24	; 27
     a64:	85 e8       	ldi	r24, 0x85	; 133
     a66:	8a 95       	dec	r24
     a68:	f1 f7       	brne	.-4      	; 0xa66 <LCDReady+0x14>
     a6a:	8b b3       	in	r24, 0x1b	; 27
     a6c:	80 64       	ori	r24, 0x40	; 64
     a6e:	8b bb       	out	0x1b, r24	; 27
     a70:	85 e0       	ldi	r24, 0x05	; 5
     a72:	8a 95       	dec	r24
     a74:	f1 f7       	brne	.-4      	; 0xa72 <LCDReady+0x20>
     a76:	cb 99       	sbic	0x19, 3	; 25
     a78:	fe cf       	rjmp	.-4      	; 0xa76 <LCDReady+0x24>
     a7a:	8b b3       	in	r24, 0x1b	; 27
     a7c:	8f 7b       	andi	r24, 0xBF	; 191
     a7e:	8b bb       	out	0x1b, r24	; 27
     a80:	85 e0       	ldi	r24, 0x05	; 5
     a82:	8a 95       	dec	r24
     a84:	f1 f7       	brne	.-4      	; 0xa82 <LCDReady+0x30>
     a86:	cb cf       	rjmp	.-106    	; 0xa1e <LCDDataStrobe>
     a88:	08 95       	ret

00000a8a <LCDReady2>:
     a8a:	e4 e6       	ldi	r30, 0x64	; 100
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	80 7f       	andi	r24, 0xF0	; 240
     a92:	80 83       	st	Z, r24
     a94:	85 b3       	in	r24, 0x15	; 21
     a96:	8f 77       	andi	r24, 0x7F	; 127
     a98:	85 bb       	out	0x15, r24	; 21
     a9a:	8b b3       	in	r24, 0x1b	; 27
     a9c:	80 68       	ori	r24, 0x80	; 128
     a9e:	8b bb       	out	0x1b, r24	; 27
     aa0:	85 e8       	ldi	r24, 0x85	; 133
     aa2:	8a 95       	dec	r24
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <LCDReady2+0x18>
     aa6:	8b b3       	in	r24, 0x1b	; 27
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	8b bb       	out	0x1b, r24	; 27
     aac:	85 e0       	ldi	r24, 0x05	; 5
     aae:	8a 95       	dec	r24
     ab0:	f1 f7       	brne	.-4      	; 0xaae <LCDReady2+0x24>
     ab2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     ab6:	83 fd       	sbrc	r24, 3
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <LCDReady2+0x28>
     aba:	8b b3       	in	r24, 0x1b	; 27
     abc:	8f 7b       	andi	r24, 0xBF	; 191
     abe:	8b bb       	out	0x1b, r24	; 27
     ac0:	85 e0       	ldi	r24, 0x05	; 5
     ac2:	8a 95       	dec	r24
     ac4:	f1 f7       	brne	.-4      	; 0xac2 <LCDReady2+0x38>
     ac6:	b8 cf       	rjmp	.-144    	; 0xa38 <LCDDataStrobe2>
     ac8:	08 95       	ret

00000aca <LCDSendByte>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	c8 2f       	mov	r28, r24
     ad0:	d6 2f       	mov	r29, r22
     ad2:	bf df       	rcall	.-130    	; 0xa52 <LCDReady>
     ad4:	8a b3       	in	r24, 0x1a	; 26
     ad6:	8f 60       	ori	r24, 0x0F	; 15
     ad8:	8a bb       	out	0x1a, r24	; 26
     ada:	dd 23       	and	r29, r29
     adc:	21 f0       	breq	.+8      	; 0xae6 <LCDSendByte+0x1c>
     ade:	8b b3       	in	r24, 0x1b	; 27
     ae0:	80 68       	ori	r24, 0x80	; 128
     ae2:	8b bb       	out	0x1b, r24	; 27
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <LCDSendByte+0x22>
     ae6:	8b b3       	in	r24, 0x1b	; 27
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	8b bb       	out	0x1b, r24	; 27
     aec:	8b b3       	in	r24, 0x1b	; 27
     aee:	8f 77       	andi	r24, 0x7F	; 127
     af0:	8b bb       	out	0x1b, r24	; 27
     af2:	8b b3       	in	r24, 0x1b	; 27
     af4:	80 7f       	andi	r24, 0xF0	; 240
     af6:	8b bb       	out	0x1b, r24	; 27
     af8:	9b b3       	in	r25, 0x1b	; 27
     afa:	8c 2f       	mov	r24, r28
     afc:	86 95       	lsr	r24
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	89 2b       	or	r24, r25
     b02:	8b bb       	out	0x1b, r24	; 27
     b04:	d5 e8       	ldi	r29, 0x85	; 133
     b06:	8d 2f       	mov	r24, r29
     b08:	8a 95       	dec	r24
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <LCDSendByte+0x3e>
     b0c:	88 df       	rcall	.-240    	; 0xa1e <LCDDataStrobe>
     b0e:	8b b3       	in	r24, 0x1b	; 27
     b10:	80 7f       	andi	r24, 0xF0	; 240
     b12:	8b bb       	out	0x1b, r24	; 27
     b14:	2b b3       	in	r18, 0x1b	; 27
     b16:	8c 2f       	mov	r24, r28
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	8f 70       	andi	r24, 0x0F	; 15
     b28:	82 2b       	or	r24, r18
     b2a:	8b bb       	out	0x1b, r24	; 27
     b2c:	da 95       	dec	r29
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <LCDSendByte+0x62>
     b30:	76 df       	rcall	.-276    	; 0xa1e <LCDDataStrobe>
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <my_putchar>:
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	c7 df       	rcall	.-114    	; 0xaca <LCDSendByte>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	08 95       	ret

00000b42 <LCDSendByte2>:
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	08 2f       	mov	r16, r24
     b4c:	c6 2f       	mov	r28, r22
     b4e:	9d df       	rcall	.-198    	; 0xa8a <LCDReady2>
     b50:	e4 e6       	ldi	r30, 0x64	; 100
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 60       	ori	r24, 0x0F	; 15
     b58:	80 83       	st	Z, r24
     b5a:	cc 23       	and	r28, r28
     b5c:	21 f0       	breq	.+8      	; 0xb66 <LCDSendByte2+0x24>
     b5e:	85 b3       	in	r24, 0x15	; 21
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	85 bb       	out	0x15, r24	; 21
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <LCDSendByte2+0x2a>
     b66:	85 b3       	in	r24, 0x15	; 21
     b68:	8f 77       	andi	r24, 0x7F	; 127
     b6a:	85 bb       	out	0x15, r24	; 21
     b6c:	8b b3       	in	r24, 0x1b	; 27
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	8b bb       	out	0x1b, r24	; 27
     b72:	c5 e6       	ldi	r28, 0x65	; 101
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	88 81       	ld	r24, Y
     b78:	80 7f       	andi	r24, 0xF0	; 240
     b7a:	88 83       	st	Y, r24
     b7c:	88 81       	ld	r24, Y
     b7e:	90 2f       	mov	r25, r16
     b80:	92 95       	swap	r25
     b82:	9f 70       	andi	r25, 0x0F	; 15
     b84:	89 2b       	or	r24, r25
     b86:	88 83       	st	Y, r24
     b88:	15 e8       	ldi	r17, 0x85	; 133
     b8a:	81 2f       	mov	r24, r17
     b8c:	8a 95       	dec	r24
     b8e:	f1 f7       	brne	.-4      	; 0xb8c <LCDSendByte2+0x4a>
     b90:	53 df       	rcall	.-346    	; 0xa38 <LCDDataStrobe2>
     b92:	88 81       	ld	r24, Y
     b94:	80 7f       	andi	r24, 0xF0	; 240
     b96:	88 83       	st	Y, r24
     b98:	88 81       	ld	r24, Y
     b9a:	0f 70       	andi	r16, 0x0F	; 15
     b9c:	08 2b       	or	r16, r24
     b9e:	08 83       	st	Y, r16
     ba0:	1a 95       	dec	r17
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <LCDSendByte2+0x5e>
     ba4:	49 df       	rcall	.-366    	; 0xa38 <LCDDataStrobe2>
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	08 95       	ret

00000bb0 <LCDClear2>:
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	c6 df       	rcall	.-116    	; 0xb42 <LCDSendByte2>
     bb6:	80 ea       	ldi	r24, 0xA0	; 160
     bb8:	9f e0       	ldi	r25, 0x0F	; 15
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <LCDClear2+0xa>
     bbe:	08 95       	ret

00000bc0 <LCDSetup2>:
     bc0:	cf 93       	push	r28
     bc2:	80 e5       	ldi	r24, 0x50	; 80
     bc4:	93 ec       	ldi	r25, 0xC3	; 195
     bc6:	01 97       	sbiw	r24, 0x01	; 1
     bc8:	f1 f7       	brne	.-4      	; 0xbc6 <LCDSetup2+0x6>
     bca:	e4 e6       	ldi	r30, 0x64	; 100
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 60       	ori	r24, 0x0F	; 15
     bd2:	80 83       	st	Z, r24
     bd4:	8a b3       	in	r24, 0x1a	; 26
     bd6:	80 6c       	ori	r24, 0xC0	; 192
     bd8:	8a bb       	out	0x1a, r24	; 26
     bda:	84 b3       	in	r24, 0x14	; 20
     bdc:	80 68       	ori	r24, 0x80	; 128
     bde:	84 bb       	out	0x14, r24	; 20
     be0:	80 81       	ld	r24, Z
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	80 83       	st	Z, r24
     be6:	e5 e6       	ldi	r30, 0x65	; 101
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	10 82       	st	Z, r1
     bec:	1b ba       	out	0x1b, r1	; 27
     bee:	15 ba       	out	0x15, r1	; 21
     bf0:	80 81       	ld	r24, Z
     bf2:	83 60       	ori	r24, 0x03	; 3
     bf4:	80 83       	st	Z, r24
     bf6:	8b b3       	in	r24, 0x1b	; 27
     bf8:	80 78       	andi	r24, 0x80	; 128
     bfa:	8b bb       	out	0x1b, r24	; 27
     bfc:	85 b3       	in	r24, 0x15	; 21
     bfe:	8f 77       	andi	r24, 0x7F	; 127
     c00:	85 bb       	out	0x15, r24	; 21
     c02:	1a df       	rcall	.-460    	; 0xa38 <LCDDataStrobe2>
     c04:	c8 e7       	ldi	r28, 0x78	; 120
     c06:	8c 2f       	mov	r24, r28
     c08:	8a 95       	dec	r24
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <LCDSetup2+0x48>
     c0c:	15 df       	rcall	.-470    	; 0xa38 <LCDDataStrobe2>
     c0e:	8c 2f       	mov	r24, r28
     c10:	8a 95       	dec	r24
     c12:	f1 f7       	brne	.-4      	; 0xc10 <LCDSetup2+0x50>
     c14:	11 df       	rcall	.-478    	; 0xa38 <LCDDataStrobe2>
     c16:	ca 95       	dec	r28
     c18:	f1 f7       	brne	.-4      	; 0xc16 <LCDSetup2+0x56>
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	88 e2       	ldi	r24, 0x28	; 40
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	8f df       	rcall	.-226    	; 0xb42 <LCDSendByte2>
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	8a df       	rcall	.-236    	; 0xb42 <LCDSendByte2>
     c2e:	c0 df       	rcall	.-128    	; 0xbb0 <LCDClear2>
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	86 e0       	ldi	r24, 0x06	; 6
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	84 df       	rcall	.-248    	; 0xb42 <LCDSendByte2>
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	8c e0       	ldi	r24, 0x0C	; 12
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	7f df       	rcall	.-258    	; 0xb42 <LCDSendByte2>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <__iob+0x3>
     c4c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <__iob+0x2>
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <putsxy2>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	8a 01       	movw	r16, r20
     c5c:	86 0f       	add	r24, r22
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	80 68       	ori	r24, 0x80	; 128
     c62:	6f df       	rcall	.-290    	; 0xb42 <LCDSendByte2>
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <putsxy2+0x1a>
     c68:	cf 5f       	subi	r28, 0xFF	; 255
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	6a df       	rcall	.-300    	; 0xb42 <LCDSendByte2>
     c6e:	f8 01       	movw	r30, r16
     c70:	ec 0f       	add	r30, r28
     c72:	f1 1d       	adc	r31, r1
     c74:	80 81       	ld	r24, Z
     c76:	81 11       	cpse	r24, r1
     c78:	f7 cf       	rjmp	.-18     	; 0xc68 <putsxy2+0x14>
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	08 95       	ret

00000c82 <putcxy2>:
//
//  Вывести символ ch в координате (X,Y)
//
//--------------------------------------------------------------------------------------------------
void putcxy2( uint8_t x, uint8_t y, char ch )
{
     c82:	cf 93       	push	r28
     c84:	c4 2f       	mov	r28, r20
	// Устанавливаем курсор в заданную позицию
	LCDSendCMD2((y + x) | LCD_CMD_ADDRESS_LINE1);
     c86:	86 0f       	add	r24, r22
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	5a df       	rcall	.-332    	; 0xb42 <LCDSendByte2>
	// посылка символа
	LCDSendData2(ch);
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	8c 2f       	mov	r24, r28
     c92:	57 df       	rcall	.-338    	; 0xb42 <LCDSendByte2>
}
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <main>:
uint8_t CurrentLineDebugChannelMenu = LINE3;
uint8_t CurrentNameLine3DebugChannelMenu = ON_CHANNEL;
//---------------------------------------/ MAIN /---------------------------------------------------
int main(void)
{	
	Start_Init();
     c98:	30 da       	rcall	.-2976   	; 0xfa <Start_Init>
	
	Language = eeprom_read_byte(20);
     c9a:	84 e1       	ldi	r24, 0x14	; 20
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	c9 d2       	rcall	.+1426   	; 0x1232 <eeprom_read_byte>
     ca0:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <Language>
	if(Language == 0xFF)
     ca4:	8f 3f       	cpi	r24, 0xFF	; 255
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <main+0x1c>
	{
		//DDRB |= (1 << PINB1);
		//PORTB |= (1 << PORTB1);
		Language =  RUSSIAN;	// значение по-умолчанию
     ca8:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <Language>
		eeprom_write_byte(20, Language);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	84 e1       	ldi	r24, 0x14	; 20
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	d8 d2       	rcall	.+1456   	; 0x1264 <eeprom_write_byte>
	}
	
	// определение строки указателя пункта в меню уставок
	switch(Language)
     cb4:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <Language>
     cb8:	88 23       	and	r24, r24
     cba:	19 f0       	breq	.+6      	; 0xcc2 <main+0x2a>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	29 f0       	breq	.+10     	; 0xcca <main+0x32>
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <main+0x38>
	{
		case RUSSIAN:
			CurrentLineOptions = LINE2;
     cc2:	80 e4       	ldi	r24, 0x40	; 64
     cc4:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <CurrentLineOptions>
			break;
     cc8:	03 c0       	rjmp	.+6      	; 0xcd0 <main+0x38>
		case ENGLISH:
			CurrentLineOptions = LINE3;
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <CurrentLineOptions>
			break;
	}		
	
	MainScreen();		// выводим название прибора
     cd0:	5e da       	rcall	.-2884   	; 0x18e <MainScreen>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	80 e3       	ldi	r24, 0x30	; 48
     cd4:	95 e7       	ldi	r25, 0x75	; 117
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <main+0x4a>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd8:	e8 ec       	ldi	r30, 0xC8	; 200
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	31 97       	sbiw	r30, 0x01	; 1
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cde:	f1 f7       	brne	.-4      	; 0xcdc <main+0x44>
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	00 97       	sbiw	r24, 0x00	; 0
	_delay_ms(3000);	// выдерживаем паузу 3с
	
	StandByScreen();	// выводим надпись ожидания измерения	
     ce4:	c9 f7       	brne	.-14     	; 0xcd8 <main+0x40>
     ce6:	63 da       	rcall	.-2874   	; 0x1ae <StandByScreen>
    {
		/*if(~PINE & (1 << PINE7)) {
			DDRB |= (1 << PINB1);		// работало
			PORTB |= (1 << PORTB1);
		}*/
		switch(State)
     ce8:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <State>
     cec:	8e 2f       	mov	r24, r30
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	34 97       	sbiw	r30, 0x04	; 4
     cf4:	ec 30       	cpi	r30, 0x0C	; 12
     cf6:	f1 05       	cpc	r31, r1
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <main+0x64>
     cfa:	69 c0       	rjmp	.+210    	; 0xdce <main+0x136>
     cfc:	ea 5b       	subi	r30, 0xBA	; 186
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
		{
			// загружаем экран с уставками
			case LOAD_OPTIONS:
				LoadOptionScreen(CurrentLineOptions);
     d00:	8f c2       	rjmp	.+1310   	; 0x1220 <__tablejump2__>
     d02:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <CurrentLineOptions>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	2c dc       	rcall	.-1960   	; 0x562 <LoadOptionScreen>
				State = OPTIONS;
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
			case CHANGE_OPTIONS:			
				CurrentLineOptions = ChangeOptions(CurrentLineOptions);
     d10:	5e c0       	rjmp	.+188    	; 0xdce <main+0x136>
     d12:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <CurrentLineOptions>
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	5b dc       	rcall	.-1866   	; 0x5d0 <ChangeOptions>
     d1a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <CurrentLineOptions>
				State = OPTIONS;
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
			case EXIT_OPTIONS:								
				if(Channel == 0 || Channel == LAST_CHANNEL) {
     d24:	54 c0       	rjmp	.+168    	; 0xdce <main+0x136>
     d26:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <Channel>
     d2a:	88 23       	and	r24, r24
     d2c:	11 f0       	breq	.+4      	; 0xd32 <main+0x9a>
     d2e:	88 31       	cpi	r24, 0x18	; 24
					StandByScreen();
     d30:	21 f4       	brne	.+8      	; 0xd3a <main+0xa2>
     d32:	3d da       	rcall	.-2950   	; 0x1ae <StandByScreen>
					State = STOP;
     d34:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <State>
     d38:	4a c0       	rjmp	.+148    	; 0xdce <main+0x136>
				} else {
					State = START;	
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     d40:	46 c0       	rjmp	.+140    	; 0xdce <main+0x136>
				}
				break;
			case OPTIONS:
				if(timer_in_options == TRUE && TCNT1 > 7813) {
     d42:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <timer_in_options>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	09 f0       	breq	.+2      	; 0xd4c <main+0xb4>
     d4a:	41 c0       	rjmp	.+130    	; 0xdce <main+0x136>
     d4c:	8c b5       	in	r24, 0x2c	; 44
     d4e:	9d b5       	in	r25, 0x2d	; 45
     d50:	86 38       	cpi	r24, 0x86	; 134
     d52:	9e 41       	sbci	r25, 0x1E	; 30
     d54:	08 f4       	brcc	.+2      	; 0xd58 <main+0xc0>
					if(CurrentLineOptions == LINE4) {
     d56:	3b c0       	rjmp	.+118    	; 0xdce <main+0x136>
     d58:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <CurrentLineOptions>
						Language = eeprom_read_byte(20);	// не изменяем язык, используем тот, который записан в памяти 
     d5c:	80 35       	cpi	r24, 0x50	; 80
     d5e:	31 f4       	brne	.+12     	; 0xd6c <main+0xd4>
     d60:	84 e1       	ldi	r24, 0x14	; 20
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	66 d2       	rcall	.+1228   	; 0x1232 <eeprom_read_byte>
					} else {
						SaveScreen();
     d66:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <Language>
						eeprom_update_byte(20, Language);						
     d6a:	31 c0       	rjmp	.+98     	; 0xdce <main+0x136>
     d6c:	6e dc       	rcall	.-1828   	; 0x64a <SaveScreen>
     d6e:	60 91 cf 03 	lds	r22, 0x03CF	; 0x8003cf <Language>
     d72:	84 e1       	ldi	r24, 0x14	; 20
     d74:	90 e0       	ldi	r25, 0x00	; 0
					//DDRB |= (1 << PINB1);
					//PORTB |= (1 << PORTB1);
				}
				break;
			case LOAD_DEBUG_OPTIONS:
				DebugScreen();
     d76:	65 d2       	rcall	.+1226   	; 0x1242 <eeprom_update_byte>
     d78:	2a c0       	rjmp	.+84     	; 0xdce <main+0x136>
				State = DEBUG_OPTIONS;
     d7a:	81 dc       	rcall	.-1790   	; 0x67e <DebugScreen>
     d7c:	88 e0       	ldi	r24, 0x08	; 8
				break;
     d7e:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
			case CHANGE_DEBUG_CHANNEL:
				ChangeDebugChannelOnSCreen(&DebugNumberChannel);
     d82:	25 c0       	rjmp	.+74     	; 0xdce <main+0x136>
     d84:	8d ec       	ldi	r24, 0xCD	; 205
     d86:	93 e0       	ldi	r25, 0x03	; 3
				State = DEBUG_OPTIONS;
     d88:	a0 dc       	rcall	.-1728   	; 0x6ca <ChangeDebugChannelOnSCreen>
     d8a:	88 e0       	ldi	r24, 0x08	; 8
				break;
     d8c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
			case LOAD_DEBUG_CHANNEL:
				DebugChannelScreen(DebugNumberChannel);
     d90:	1e c0       	rjmp	.+60     	; 0xdce <main+0x136>
     d92:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <DebugNumberChannel>
				State = DEBUG_CHANNEL;
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	ad dc       	rcall	.-1702   	; 0x6f4 <DebugChannelScreen>
     d9a:	8b e0       	ldi	r24, 0x0B	; 11
				break;
     d9c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
			case CHANGE_MENU_DEBUG_CHANNEL:
				ChangeMenuDebugChannel(&CurrentLineDebugChannelMenu);
     da0:	16 c0       	rjmp	.+44     	; 0xdce <main+0x136>
     da2:	8f e0       	ldi	r24, 0x0F	; 15
				State = DEBUG_CHANNEL;
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	00 dd       	rcall	.-1536   	; 0x7a8 <ChangeMenuDebugChannel>
     da8:	8b e0       	ldi	r24, 0x0B	; 11
				break;
     daa:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
			case START_DEBUG:
				StartMeasurementSingleChannel(DebugNumberChannel);
     dae:	0f c0       	rjmp	.+30     	; 0xdce <main+0x136>
     db0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <DebugNumberChannel>
     db4:	90 e0       	ldi	r25, 0x00	; 0
				State = DEBUG_CHANNEL;
     db6:	25 dd       	rcall	.-1462   	; 0x802 <StartMeasurementSingleChannel>
     db8:	8b e0       	ldi	r24, 0x0B	; 11
     dba:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
			case STOP_DEBUG:
				StopMeasurementSingleChannel(DebugNumberChannel);
     dbe:	07 c0       	rjmp	.+14     	; 0xdce <main+0x136>
     dc0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <DebugNumberChannel>
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	f9 dd       	rcall	.-1038   	; 0x9ba <StopMeasurementSingleChannel>
				State = DEBUG_CHANNEL;			
     dc8:	8b e0       	ldi	r24, 0x0B	; 11
     dca:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
		}
		
		if(State == START || State == CONTINUE) {
     dce:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	19 f0       	breq	.+6      	; 0xddc <main+0x144>
     dd6:	83 30       	cpi	r24, 0x03	; 3
			PORTG |= (1 << PORTG4);		// включаем лампочку "Работа"
     dd8:	09 f0       	breq	.+2      	; 0xddc <main+0x144>
     dda:	86 cf       	rjmp	.-244    	; 0xce8 <main+0x50>
     ddc:	e5 e6       	ldi	r30, 0x65	; 101
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
			
			if(State == START) Start();
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	80 83       	st	Z, r24
     de6:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	61 f4       	brne	.+24     	; 0xe06 <main+0x16e>
     dee:	fe d9       	rcall	.-3076   	; 0x1ec <Start>
#if VERSION == 12
			while(Channel != LAST_CHANNEL) {
				Channel = Measurement_v2(Channel);
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <main+0x16e>
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	52 da       	rcall	.-2908   	; 0x29a <Measurement_v2>
     df6:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <Channel>
				if(State == PAUSE || State == LOAD_OPTIONS) break;
     dfa:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	31 f0       	breq	.+12     	; 0xe0e <main+0x176>
     e02:	84 30       	cpi	r24, 0x04	; 4
		if(State == START || State == CONTINUE) {
			PORTG |= (1 << PORTG4);		// включаем лампочку "Работа"
			
			if(State == START) Start();
#if VERSION == 12
			while(Channel != LAST_CHANNEL) {
     e04:	21 f0       	breq	.+8      	; 0xe0e <main+0x176>
     e06:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <Channel>
     e0a:	88 31       	cpi	r24, 0x18	; 24
				Channel = Measurement_v2(Channel);
				if(State == PAUSE || State == LOAD_OPTIONS) break;
			}			
#endif
			// закончили измерение
			PORTG &= ~(1 << PORTG4);	// выключаем лампочку "Работа"
     e0c:	91 f7       	brne	.-28     	; 0xdf2 <main+0x15a>
     e0e:	e5 e6       	ldi	r30, 0x65	; 101
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8f 7e       	andi	r24, 0xEF	; 239
			
			if(State == START || State == CONTINUE) {
     e16:	80 83       	st	Z, r24
     e18:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	19 f0       	breq	.+6      	; 0xe26 <main+0x18e>
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	09 f0       	breq	.+2      	; 0xe26 <main+0x18e>
				Finished();
     e24:	61 cf       	rjmp	.-318    	; 0xce8 <main+0x50>
     e26:	10 da       	rcall	.-3040   	; 0x248 <Finished>
				StandByScreen();	// выводим надпись ожидания измерения
     e28:	c2 d9       	rcall	.-3196   	; 0x1ae <StandByScreen>
     e2a:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <State>
				State = STOP;
     e2e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <Channel>
				Channel = 0;				
     e32:	5a cf       	rjmp	.-332    	; 0xce8 <main+0x50>

00000e34 <__vector_8>:
     e34:	1f 92       	push	r1
}

// INT7_vect - внешнее прерывание 7
uint8_t button_level = HIGH_LEVEL;
ISR(INT7_vect)
{
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0b b6       	in	r0, 0x3b	; 59
     e40:	0f 92       	push	r0
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
	if(button_level == HIGH_LEVEL) {
     e58:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <button_level>
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	c9 f4       	brne	.+50     	; 0xe92 <__vector_8+0x5e>
		button_level = LOW_LEVEL;				// кнопка нажата
     e60:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <button_level>
		
		EIMSK &= ~(1 << INT7);					// выключаем прерывание
     e64:	89 b7       	in	r24, 0x39	; 57
     e66:	8f 77       	andi	r24, 0x7F	; 127
     e68:	89 bf       	out	0x39, r24	; 57
		EICRB |= (1 << ISC71) | (1 << ISC70);	// выставляем прерывание по нарастающему фронту ISC71 = 1 и ISC70 = 1
     e6a:	8a b7       	in	r24, 0x3a	; 58
     e6c:	80 6c       	ori	r24, 0xC0	; 192
     e6e:	8a bf       	out	0x3a, r24	; 58
		EIMSK |= (1 << INT7);					// включаем прерывание
     e70:	89 b7       	in	r24, 0x39	; 57
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	89 bf       	out	0x39, r24	; 57
		
		//DDRB |= (1 << PINB1);
		//PORTB &= ~(1 << PORTB1);
		
		// выставляем флаг запуска таймера/счётчик 1 в окне опций
		if(State == OPTIONS)
     e76:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     e7a:	85 30       	cpi	r24, 0x05	; 5
     e7c:	19 f4       	brne	.+6      	; 0xe84 <__vector_8+0x50>
			timer_in_options = TRUE;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <timer_in_options>
		
		TCNT1 = 0;								// включаем таймер-счётчик 1
     e84:	1d bc       	out	0x2d, r1	; 45
     e86:	1c bc       	out	0x2c, r1	; 44
     e88:	80 e6       	ldi	r24, 0x60	; 96
     e8a:	9a ee       	ldi	r25, 0xEA	; 234
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <__vector_8+0x58>
     e90:	a9 c0       	rjmp	.+338    	; 0xfe4 <__vector_8+0x1b0>
		_delay_ms(30);
		return;
	}
	
	if(button_level == LOW_LEVEL) {
     e92:	81 11       	cpse	r24, r1
     e94:	a7 c0       	rjmp	.+334    	; 0xfe4 <__vector_8+0x1b0>
		button_level = HIGH_LEVEL;				// кнопка отжата
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <button_level>
		
		//DDRB |= (1 << PINB1);
		//PORTB |= (1 << PORTB1);
		
		EIMSK &= ~(1 << INT7);					// выключаем прерывание
     e9c:	89 b7       	in	r24, 0x39	; 57
     e9e:	8f 77       	andi	r24, 0x7F	; 127
     ea0:	89 bf       	out	0x39, r24	; 57
		EICRB |= (1 << ISC71);					// выставляем прерывание по падающему фронту ISC71 = 1 и ISC70 = 0
     ea2:	8a b7       	in	r24, 0x3a	; 58
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	8a bf       	out	0x3a, r24	; 58
		EICRB &= ~(1 << ISC70);					//
     ea8:	8a b7       	in	r24, 0x3a	; 58
     eaa:	8f 7b       	andi	r24, 0xBF	; 191
     eac:	8a bf       	out	0x3a, r24	; 58
		EIMSK |= (1 << INT7);					// включаем прерывание
     eae:	89 b7       	in	r24, 0x39	; 57
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	89 bf       	out	0x39, r24	; 57
				
		switch(State){
     eb4:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <State>
     eb8:	8e 2f       	mov	r24, r30
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	8c 30       	cpi	r24, 0x0C	; 12
     ebe:	91 05       	cpc	r25, r1
     ec0:	08 f5       	brcc	.+66     	; 0xf04 <__vector_8+0xd0>
     ec2:	fc 01       	movw	r30, r24
     ec4:	ee 5a       	subi	r30, 0xAE	; 174
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	ab c1       	rjmp	.+854    	; 0x1220 <__tablejump2__>
			case STOP:
				State = START;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
     ed0:	19 c0       	rjmp	.+50     	; 0xf04 <__vector_8+0xd0>
			case START:
				State = PAUSE;
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
     ed8:	15 c0       	rjmp	.+42     	; 0xf04 <__vector_8+0xd0>
			case PAUSE:
				State = CONTINUE;
     eda:	83 e0       	ldi	r24, 0x03	; 3
     edc:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <__vector_8+0xd0>
			case CONTINUE:
				State = PAUSE;
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <__vector_8+0xd0>
			case OPTIONS:
				State = CHANGE_OPTIONS;
     eea:	86 e0       	ldi	r24, 0x06	; 6
     eec:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				timer_in_options = FALSE;
     ef0:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <timer_in_options>
				break;
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <__vector_8+0xd0>
			case DEBUG_OPTIONS:
				State = CHANGE_DEBUG_CHANNEL;
     ef6:	89 e0       	ldi	r24, 0x09	; 9
     ef8:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <__vector_8+0xd0>
			case DEBUG_CHANNEL:
				State = CHANGE_MENU_DEBUG_CHANNEL;
     efe:	8c e0       	ldi	r24, 0x0C	; 12
     f00:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
				break;
		}
		
		if(TCNT1 > 7813) {									// 7813 - это 1с
     f04:	8c b5       	in	r24, 0x2c	; 44
     f06:	9d b5       	in	r25, 0x2d	; 45
     f08:	86 38       	cpi	r24, 0x86	; 134
     f0a:	9e 41       	sbci	r25, 0x1E	; 30
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <__vector_8+0xdc>
     f0e:	66 c0       	rjmp	.+204    	; 0xfdc <__vector_8+0x1a8>
			switch(State) {
     f10:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <State>
     f14:	89 30       	cpi	r24, 0x09	; 9
     f16:	89 f0       	breq	.+34     	; 0xf3a <__vector_8+0x106>
     f18:	8c 30       	cpi	r24, 0x0C	; 12
     f1a:	99 f0       	breq	.+38     	; 0xf42 <__vector_8+0x10e>
     f1c:	86 30       	cpi	r24, 0x06	; 6
     f1e:	09 f0       	breq	.+2      	; 0xf22 <__vector_8+0xee>
     f20:	5a c0       	rjmp	.+180    	; 0xfd6 <__vector_8+0x1a2>
				case CHANGE_OPTIONS:
					if(CurrentLineOptions == LINE4) {		// если долгое нажатие кнопки и в опциях выбран "Режим отладки"
     f22:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <CurrentLineOptions>
     f26:	80 35       	cpi	r24, 0x50	; 80
     f28:	21 f4       	brne	.+8      	; 0xf32 <__vector_8+0xfe>
						State = LOAD_DEBUG_OPTIONS;
     f2a:	87 e0       	ldi	r24, 0x07	; 7
     f2c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     f30:	55 c0       	rjmp	.+170    	; 0xfdc <__vector_8+0x1a8>
					} else {
						State = EXIT_OPTIONS;
     f32:	8d e0       	ldi	r24, 0x0D	; 13
     f34:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     f38:	51 c0       	rjmp	.+162    	; 0xfdc <__vector_8+0x1a8>
					}				
					break;
				case CHANGE_DEBUG_CHANNEL:
					State = LOAD_DEBUG_CHANNEL;
     f3a:	8a e0       	ldi	r24, 0x0A	; 10
     f3c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
					break;
     f40:	4d c0       	rjmp	.+154    	; 0xfdc <__vector_8+0x1a8>
				case CHANGE_MENU_DEBUG_CHANNEL:				// если долгое нажатие кнопки в режиме отладки канала
					switch(CurrentLineDebugChannelMenu) {
     f42:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <CurrentLineDebugChannelMenu>
     f46:	80 31       	cpi	r24, 0x10	; 16
     f48:	19 f0       	breq	.+6      	; 0xf50 <__vector_8+0x11c>
     f4a:	80 35       	cpi	r24, 0x50	; 80
     f4c:	91 f0       	breq	.+36     	; 0xf72 <__vector_8+0x13e>
     f4e:	46 c0       	rjmp	.+140    	; 0xfdc <__vector_8+0x1a8>
						case LINE3:						
							if(CurrentNameLine3DebugChannelMenu == ON_CHANNEL) {
     f50:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     f54:	81 11       	cpse	r24, r1
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <__vector_8+0x132>
								CurrentNameLine3DebugChannelMenu = OFF_CHANNEL;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <__data_end>
								State = START_DEBUG;
     f5e:	8e e0       	ldi	r24, 0x0E	; 14
     f60:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     f64:	3b c0       	rjmp	.+118    	; 0xfdc <__vector_8+0x1a8>
							} else {
								CurrentNameLine3DebugChannelMenu = ON_CHANNEL;
     f66:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
								State = STOP_DEBUG;
     f6a:	8f e0       	ldi	r24, 0x0F	; 15
     f6c:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     f70:	35 c0       	rjmp	.+106    	; 0xfdc <__vector_8+0x1a8>
							}
							break;
						case LINE4:
							State = EXIT_OPTIONS;
     f72:	8d e0       	ldi	r24, 0x0D	; 13
     f74:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
							CurrentLineDebugChannelMenu = LINE3;	// присваиваем первоначальное состояние
     f78:	80 e1       	ldi	r24, 0x10	; 16
     f7a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <CurrentLineDebugChannelMenu>
							if(CurrentNameLine3DebugChannelMenu == OFF_CHANNEL) {	// если вдруг был выполнен выход с включённым отладочным
     f7e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <__data_end>
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	29 f5       	brne	.+74     	; 0xfd0 <__vector_8+0x19c>
								if(DebugNumberChannel < 6)							// закрываем подканал 1
     f86:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <DebugNumberChannel>
     f8a:	86 30       	cpi	r24, 0x06	; 6
     f8c:	80 f4       	brcc	.+32     	; 0xfae <__vector_8+0x17a>
									PORTF &= ~(1 << DebugNumberChannel);
     f8e:	e2 e6       	ldi	r30, 0x62	; 98
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	40 81       	ld	r20, Z
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	b9 01       	movw	r22, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <__vector_8+0x16c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <__vector_8+0x168>
     fa4:	cb 01       	movw	r24, r22
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	80 83       	st	Z, r24
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <__vector_8+0x198>
								else
									PORTD &= ~(1 << (DebugNumberChannel - 6));
     fae:	42 b3       	in	r20, 0x12	; 18
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	06 97       	sbiw	r24, 0x06	; 6
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	b9 01       	movw	r22, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <__vector_8+0x18c>
     fbc:	66 0f       	add	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <__vector_8+0x188>
     fc4:	cb 01       	movw	r24, r22
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	82 bb       	out	0x12, r24	; 18
								CurrentNameLine3DebugChannelMenu = ON_CHANNEL;
     fcc:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <__data_end>
							}
							DebugNumberChannel = 0;
     fd0:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <DebugNumberChannel>
							break;
     fd4:	03 c0       	rjmp	.+6      	; 0xfdc <__vector_8+0x1a8>
					}
					break;
				default:
					State = LOAD_OPTIONS;
     fd6:	84 e0       	ldi	r24, 0x04	; 4
     fd8:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <State>
     fdc:	80 e6       	ldi	r24, 0x60	; 96
     fde:	9a ee       	ldi	r25, 0xEA	; 234
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <__vector_8+0x1ac>
			}
		}
		
		_delay_ms(30);
	}
}
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	bf 91       	pop	r27
     fea:	af 91       	pop	r26
     fec:	9f 91       	pop	r25
     fee:	8f 91       	pop	r24
     ff0:	7f 91       	pop	r23
     ff2:	6f 91       	pop	r22
     ff4:	4f 91       	pop	r20
     ff6:	3f 91       	pop	r19
     ff8:	2f 91       	pop	r18
     ffa:	0f 90       	pop	r0
     ffc:	0b be       	out	0x3b, r0	; 59
     ffe:	0f 90       	pop	r0
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	0f 90       	pop	r0
    1004:	1f 90       	pop	r1
    1006:	18 95       	reti

00001008 <__cmpsf2>:
    1008:	2f d0       	rcall	.+94     	; 0x1068 <__fp_cmp>
    100a:	08 f4       	brcc	.+2      	; 0x100e <__cmpsf2+0x6>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	08 95       	ret

00001010 <__fixunssfsi>:
    1010:	57 d0       	rcall	.+174    	; 0x10c0 <__fp_splitA>
    1012:	88 f0       	brcs	.+34     	; 0x1036 <__fixunssfsi+0x26>
    1014:	9f 57       	subi	r25, 0x7F	; 127
    1016:	90 f0       	brcs	.+36     	; 0x103c <__fixunssfsi+0x2c>
    1018:	b9 2f       	mov	r27, r25
    101a:	99 27       	eor	r25, r25
    101c:	b7 51       	subi	r27, 0x17	; 23
    101e:	a0 f0       	brcs	.+40     	; 0x1048 <__fixunssfsi+0x38>
    1020:	d1 f0       	breq	.+52     	; 0x1056 <__fixunssfsi+0x46>
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	1a f0       	brmi	.+6      	; 0x1032 <__fixunssfsi+0x22>
    102c:	ba 95       	dec	r27
    102e:	c9 f7       	brne	.-14     	; 0x1022 <__fixunssfsi+0x12>
    1030:	12 c0       	rjmp	.+36     	; 0x1056 <__fixunssfsi+0x46>
    1032:	b1 30       	cpi	r27, 0x01	; 1
    1034:	81 f0       	breq	.+32     	; 0x1056 <__fixunssfsi+0x46>
    1036:	5e d0       	rcall	.+188    	; 0x10f4 <__fp_zero>
    1038:	b1 e0       	ldi	r27, 0x01	; 1
    103a:	08 95       	ret
    103c:	5b c0       	rjmp	.+182    	; 0x10f4 <__fp_zero>
    103e:	67 2f       	mov	r22, r23
    1040:	78 2f       	mov	r23, r24
    1042:	88 27       	eor	r24, r24
    1044:	b8 5f       	subi	r27, 0xF8	; 248
    1046:	39 f0       	breq	.+14     	; 0x1056 <__fixunssfsi+0x46>
    1048:	b9 3f       	cpi	r27, 0xF9	; 249
    104a:	cc f3       	brlt	.-14     	; 0x103e <__fixunssfsi+0x2e>
    104c:	86 95       	lsr	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b3 95       	inc	r27
    1054:	d9 f7       	brne	.-10     	; 0x104c <__fixunssfsi+0x3c>
    1056:	3e f4       	brtc	.+14     	; 0x1066 <__fixunssfsi+0x56>
    1058:	90 95       	com	r25
    105a:	80 95       	com	r24
    105c:	70 95       	com	r23
    105e:	61 95       	neg	r22
    1060:	7f 4f       	sbci	r23, 0xFF	; 255
    1062:	8f 4f       	sbci	r24, 0xFF	; 255
    1064:	9f 4f       	sbci	r25, 0xFF	; 255
    1066:	08 95       	ret

00001068 <__fp_cmp>:
    1068:	99 0f       	add	r25, r25
    106a:	00 08       	sbc	r0, r0
    106c:	55 0f       	add	r21, r21
    106e:	aa 0b       	sbc	r26, r26
    1070:	e0 e8       	ldi	r30, 0x80	; 128
    1072:	fe ef       	ldi	r31, 0xFE	; 254
    1074:	16 16       	cp	r1, r22
    1076:	17 06       	cpc	r1, r23
    1078:	e8 07       	cpc	r30, r24
    107a:	f9 07       	cpc	r31, r25
    107c:	c0 f0       	brcs	.+48     	; 0x10ae <__fp_cmp+0x46>
    107e:	12 16       	cp	r1, r18
    1080:	13 06       	cpc	r1, r19
    1082:	e4 07       	cpc	r30, r20
    1084:	f5 07       	cpc	r31, r21
    1086:	98 f0       	brcs	.+38     	; 0x10ae <__fp_cmp+0x46>
    1088:	62 1b       	sub	r22, r18
    108a:	73 0b       	sbc	r23, r19
    108c:	84 0b       	sbc	r24, r20
    108e:	95 0b       	sbc	r25, r21
    1090:	39 f4       	brne	.+14     	; 0x10a0 <__fp_cmp+0x38>
    1092:	0a 26       	eor	r0, r26
    1094:	61 f0       	breq	.+24     	; 0x10ae <__fp_cmp+0x46>
    1096:	23 2b       	or	r18, r19
    1098:	24 2b       	or	r18, r20
    109a:	25 2b       	or	r18, r21
    109c:	21 f4       	brne	.+8      	; 0x10a6 <__fp_cmp+0x3e>
    109e:	08 95       	ret
    10a0:	0a 26       	eor	r0, r26
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__fp_cmp+0x3e>
    10a4:	a1 40       	sbci	r26, 0x01	; 1
    10a6:	a6 95       	lsr	r26
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	81 1d       	adc	r24, r1
    10ac:	81 1d       	adc	r24, r1
    10ae:	08 95       	ret

000010b0 <__fp_split3>:
    10b0:	57 fd       	sbrc	r21, 7
    10b2:	90 58       	subi	r25, 0x80	; 128
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <__fp_splitA+0x10>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	71 f0       	breq	.+28     	; 0x10da <__fp_splitA+0x1a>
    10be:	47 95       	ror	r20

000010c0 <__fp_splitA>:
    10c0:	88 0f       	add	r24, r24
    10c2:	97 fb       	bst	r25, 7
    10c4:	99 1f       	adc	r25, r25
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <__fp_splitA+0x20>
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	79 f0       	breq	.+30     	; 0x10ea <__fp_splitA+0x2a>
    10cc:	87 95       	ror	r24
    10ce:	08 95       	ret
    10d0:	12 16       	cp	r1, r18
    10d2:	13 06       	cpc	r1, r19
    10d4:	14 06       	cpc	r1, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	f2 cf       	rjmp	.-28     	; 0x10be <__fp_split3+0xe>
    10da:	46 95       	lsr	r20
    10dc:	f1 df       	rcall	.-30     	; 0x10c0 <__fp_splitA>
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <__fp_splitA+0x30>
    10e0:	16 16       	cp	r1, r22
    10e2:	17 06       	cpc	r1, r23
    10e4:	18 06       	cpc	r1, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	f1 cf       	rjmp	.-30     	; 0x10cc <__fp_splitA+0xc>
    10ea:	86 95       	lsr	r24
    10ec:	71 05       	cpc	r23, r1
    10ee:	61 05       	cpc	r22, r1
    10f0:	08 94       	sec
    10f2:	08 95       	ret

000010f4 <__fp_zero>:
    10f4:	e8 94       	clt

000010f6 <__fp_szero>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	66 27       	eor	r22, r22
    10fa:	77 27       	eor	r23, r23
    10fc:	cb 01       	movw	r24, r22
    10fe:	97 f9       	bld	r25, 7
    1100:	08 95       	ret

00001102 <__gesf2>:
    1102:	b2 df       	rcall	.-156    	; 0x1068 <__fp_cmp>
    1104:	08 f4       	brcc	.+2      	; 0x1108 <__gesf2+0x6>
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	08 95       	ret

0000110a <__mulsf3>:
    110a:	0b d0       	rcall	.+22     	; 0x1122 <__mulsf3x>
    110c:	78 c0       	rjmp	.+240    	; 0x11fe <__fp_round>
    110e:	69 d0       	rcall	.+210    	; 0x11e2 <__fp_pscA>
    1110:	28 f0       	brcs	.+10     	; 0x111c <__mulsf3+0x12>
    1112:	6e d0       	rcall	.+220    	; 0x11f0 <__fp_pscB>
    1114:	18 f0       	brcs	.+6      	; 0x111c <__mulsf3+0x12>
    1116:	95 23       	and	r25, r21
    1118:	09 f0       	breq	.+2      	; 0x111c <__mulsf3+0x12>
    111a:	5a c0       	rjmp	.+180    	; 0x11d0 <__fp_inf>
    111c:	5f c0       	rjmp	.+190    	; 0x11dc <__fp_nan>
    111e:	11 24       	eor	r1, r1
    1120:	ea cf       	rjmp	.-44     	; 0x10f6 <__fp_szero>

00001122 <__mulsf3x>:
    1122:	c6 df       	rcall	.-116    	; 0x10b0 <__fp_split3>
    1124:	a0 f3       	brcs	.-24     	; 0x110e <__mulsf3+0x4>

00001126 <__mulsf3_pse>:
    1126:	95 9f       	mul	r25, r21
    1128:	d1 f3       	breq	.-12     	; 0x111e <__mulsf3+0x14>
    112a:	95 0f       	add	r25, r21
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	55 1f       	adc	r21, r21
    1130:	62 9f       	mul	r22, r18
    1132:	f0 01       	movw	r30, r0
    1134:	72 9f       	mul	r23, r18
    1136:	bb 27       	eor	r27, r27
    1138:	f0 0d       	add	r31, r0
    113a:	b1 1d       	adc	r27, r1
    113c:	63 9f       	mul	r22, r19
    113e:	aa 27       	eor	r26, r26
    1140:	f0 0d       	add	r31, r0
    1142:	b1 1d       	adc	r27, r1
    1144:	aa 1f       	adc	r26, r26
    1146:	64 9f       	mul	r22, r20
    1148:	66 27       	eor	r22, r22
    114a:	b0 0d       	add	r27, r0
    114c:	a1 1d       	adc	r26, r1
    114e:	66 1f       	adc	r22, r22
    1150:	82 9f       	mul	r24, r18
    1152:	22 27       	eor	r18, r18
    1154:	b0 0d       	add	r27, r0
    1156:	a1 1d       	adc	r26, r1
    1158:	62 1f       	adc	r22, r18
    115a:	73 9f       	mul	r23, r19
    115c:	b0 0d       	add	r27, r0
    115e:	a1 1d       	adc	r26, r1
    1160:	62 1f       	adc	r22, r18
    1162:	83 9f       	mul	r24, r19
    1164:	a0 0d       	add	r26, r0
    1166:	61 1d       	adc	r22, r1
    1168:	22 1f       	adc	r18, r18
    116a:	74 9f       	mul	r23, r20
    116c:	33 27       	eor	r19, r19
    116e:	a0 0d       	add	r26, r0
    1170:	61 1d       	adc	r22, r1
    1172:	23 1f       	adc	r18, r19
    1174:	84 9f       	mul	r24, r20
    1176:	60 0d       	add	r22, r0
    1178:	21 1d       	adc	r18, r1
    117a:	82 2f       	mov	r24, r18
    117c:	76 2f       	mov	r23, r22
    117e:	6a 2f       	mov	r22, r26
    1180:	11 24       	eor	r1, r1
    1182:	9f 57       	subi	r25, 0x7F	; 127
    1184:	50 40       	sbci	r21, 0x00	; 0
    1186:	8a f0       	brmi	.+34     	; 0x11aa <__mulsf3_pse+0x84>
    1188:	e1 f0       	breq	.+56     	; 0x11c2 <__mulsf3_pse+0x9c>
    118a:	88 23       	and	r24, r24
    118c:	4a f0       	brmi	.+18     	; 0x11a0 <__mulsf3_pse+0x7a>
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	bb 1f       	adc	r27, r27
    1194:	66 1f       	adc	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	88 1f       	adc	r24, r24
    119a:	91 50       	subi	r25, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	a9 f7       	brne	.-22     	; 0x118a <__mulsf3_pse+0x64>
    11a0:	9e 3f       	cpi	r25, 0xFE	; 254
    11a2:	51 05       	cpc	r21, r1
    11a4:	70 f0       	brcs	.+28     	; 0x11c2 <__mulsf3_pse+0x9c>
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <__fp_inf>
    11a8:	a6 cf       	rjmp	.-180    	; 0x10f6 <__fp_szero>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	ec f3       	brlt	.-6      	; 0x11a8 <__mulsf3_pse+0x82>
    11ae:	98 3e       	cpi	r25, 0xE8	; 232
    11b0:	dc f3       	brlt	.-10     	; 0x11a8 <__mulsf3_pse+0x82>
    11b2:	86 95       	lsr	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	b7 95       	ror	r27
    11ba:	f7 95       	ror	r31
    11bc:	e7 95       	ror	r30
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	c1 f7       	brne	.-16     	; 0x11b2 <__mulsf3_pse+0x8c>
    11c2:	fe 2b       	or	r31, r30
    11c4:	88 0f       	add	r24, r24
    11c6:	91 1d       	adc	r25, r1
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	97 f9       	bld	r25, 7
    11ce:	08 95       	ret

000011d0 <__fp_inf>:
    11d0:	97 f9       	bld	r25, 7
    11d2:	9f 67       	ori	r25, 0x7F	; 127
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	08 95       	ret

000011dc <__fp_nan>:
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	80 ec       	ldi	r24, 0xC0	; 192
    11e0:	08 95       	ret

000011e2 <__fp_pscA>:
    11e2:	00 24       	eor	r0, r0
    11e4:	0a 94       	dec	r0
    11e6:	16 16       	cp	r1, r22
    11e8:	17 06       	cpc	r1, r23
    11ea:	18 06       	cpc	r1, r24
    11ec:	09 06       	cpc	r0, r25
    11ee:	08 95       	ret

000011f0 <__fp_pscB>:
    11f0:	00 24       	eor	r0, r0
    11f2:	0a 94       	dec	r0
    11f4:	12 16       	cp	r1, r18
    11f6:	13 06       	cpc	r1, r19
    11f8:	14 06       	cpc	r1, r20
    11fa:	05 06       	cpc	r0, r21
    11fc:	08 95       	ret

000011fe <__fp_round>:
    11fe:	09 2e       	mov	r0, r25
    1200:	03 94       	inc	r0
    1202:	00 0c       	add	r0, r0
    1204:	11 f4       	brne	.+4      	; 0x120a <__fp_round+0xc>
    1206:	88 23       	and	r24, r24
    1208:	52 f0       	brmi	.+20     	; 0x121e <__fp_round+0x20>
    120a:	bb 0f       	add	r27, r27
    120c:	40 f4       	brcc	.+16     	; 0x121e <__fp_round+0x20>
    120e:	bf 2b       	or	r27, r31
    1210:	11 f4       	brne	.+4      	; 0x1216 <__fp_round+0x18>
    1212:	60 ff       	sbrs	r22, 0
    1214:	04 c0       	rjmp	.+8      	; 0x121e <__fp_round+0x20>
    1216:	6f 5f       	subi	r22, 0xFF	; 255
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8f 4f       	sbci	r24, 0xFF	; 255
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	08 95       	ret

00001220 <__tablejump2__>:
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	00 24       	eor	r0, r0
    1226:	00 1c       	adc	r0, r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	07 90       	elpm	r0, Z+
    122c:	f6 91       	elpm	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	09 94       	ijmp

00001232 <eeprom_read_byte>:
    1232:	e1 99       	sbic	0x1c, 1	; 28
    1234:	fe cf       	rjmp	.-4      	; 0x1232 <eeprom_read_byte>
    1236:	9f bb       	out	0x1f, r25	; 31
    1238:	8e bb       	out	0x1e, r24	; 30
    123a:	e0 9a       	sbi	0x1c, 0	; 28
    123c:	99 27       	eor	r25, r25
    123e:	8d b3       	in	r24, 0x1d	; 29
    1240:	08 95       	ret

00001242 <eeprom_update_byte>:
    1242:	26 2f       	mov	r18, r22

00001244 <eeprom_update_r18>:
    1244:	e1 99       	sbic	0x1c, 1	; 28
    1246:	fe cf       	rjmp	.-4      	; 0x1244 <eeprom_update_r18>
    1248:	9f bb       	out	0x1f, r25	; 31
    124a:	8e bb       	out	0x1e, r24	; 30
    124c:	e0 9a       	sbi	0x1c, 0	; 28
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	0d b2       	in	r0, 0x1d	; 29
    1252:	02 16       	cp	r0, r18
    1254:	31 f0       	breq	.+12     	; 0x1262 <eeprom_update_r18+0x1e>
    1256:	2d bb       	out	0x1d, r18	; 29
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	e2 9a       	sbi	0x1c, 2	; 28
    125e:	e1 9a       	sbi	0x1c, 1	; 28
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	08 95       	ret

00001264 <eeprom_write_byte>:
    1264:	26 2f       	mov	r18, r22

00001266 <eeprom_write_r18>:
    1266:	e1 99       	sbic	0x1c, 1	; 28
    1268:	fe cf       	rjmp	.-4      	; 0x1266 <eeprom_write_r18>
    126a:	9f bb       	out	0x1f, r25	; 31
    126c:	8e bb       	out	0x1e, r24	; 30
    126e:	2d bb       	out	0x1d, r18	; 29
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	e2 9a       	sbi	0x1c, 2	; 28
    1276:	e1 9a       	sbi	0x1c, 1	; 28
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	08 95       	ret

0000127e <_exit>:
    127e:	f8 94       	cli

00001280 <__stop_program>:
    1280:	ff cf       	rjmp	.-2      	; 0x1280 <__stop_program>
